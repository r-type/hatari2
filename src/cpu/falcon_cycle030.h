// Cycle table for Falcon instructions
// All cycles are given for 4 cycles bus

// Head, Tail, I-Cache Case (r/p/w), No-Cache Case (r/p/w), Instruction


struct table_falcon_cycles_t {
	int head;
	int tail;
	int cache_cycles;
	int cache_cycles_r; 
	int cache_cycles_p; 
	int cache_cycles_w; 
	int noncache_cycles;
	int noncache_cycles_r; 
	int noncache_cycles_p; 
	int noncache_cycles_w; 
};

struct table_falcon_cycles_t table_falcon_cycles [] = {
	{6,	0,	 4,0,0,0,	 8,0,2,0},	// ORI.B #<data>.W,Dn
	{1,	2,	10,1,0,1,	16,1,2,1},	// ORI.B #<data>.W,(An)
	{2,	2,	12,1,0,1,	17,1,2,1},	// ORI.B #<data>.W,(An)+
	{2,	3,	11,1,0,1,	16,1,2,1},	// ORI.B #<data>.W,-(An)
	{2,	1,	11,1,0,1,	17,1,2,1},	// ORI.B #<data>.W,(d16,An)
	{8,	3,	15,1,0,1,	22,1,3,1},	// ORI.B #<data>.W,(d8,An,Xn)
	{4,	3,	13,1,0,1,	18,1,2,1},	// ORI.B #<data>.W,(xxx).W
	{3,	1,	13,1,0,1,	21,1,3,1},	// ORI.B #<data>.W,(xxx).L
	{4,	0,	12,0,0,0,	18,0,2,0},	// ORI.B #<data>.W, SR
	{6,	0,	 4,0,0,0,	 8,0,2,0},	// ORI.W #<data>.W,Dn
	{1,	2,	10,1,0,1,	16,1,2,1},	// ORI.W #<data>.W,(An)
	{2,	2,	12,1,0,1,	17,1,2,1},	// ORI.W #<data>.W,(An)+
	{2,	3,	11,1,0,1,	16,1,2,1},	// ORI.W #<data>.W,-(An)
	{2,	1,	11,1,0,1,	17,1,2,1},	// ORI.W #<data>.W,(d16,An)
	{8,	3,	15,1,0,1,	22,1,3,1},	// ORI.W #<data>.W,(d8,An,Xn)
	{4,	3,	13,1,0,1,	18,1,2,1},	// ORI.W #<data>.W,(xxx).W
	{3,	1,	13,1,0,1,	21,1,3,1},	// ORI.W #<data>.W,(xxx).L
	{4,	0,	12,0,0,0,	18,0,2,0},	// ORI.W #<data>.W, SR
	{8,	0,	 6,0,0,0,	10,0,2,0},	// ORI.L #<data>.L,Dn
	{1,	1,	19,1,0,1,	25,1,2,1},	// ORI.L #<data>.L,(An)
	{4,	2,	22,1,0,1,	27,1,2,1},	// ORI.L #<data>.L,(An)+
	{2,	1,	19,1,0,1,	25,1,2,1},	// ORI.L #<data>.L,-(An)
	{4,	1,	21,1,0,1,	30,1,3,1},	// ORI.L #<data>.L,(d16,An)
	{8,	3,	25,1,0,1,	32,1,3,1},	// ORI.L #<data>.L,(d8,An,Xn)
	{6,	3,	23,1,0,1,	30,1,3,1},	// ORI.L #<data>.L,(xxx).W
	{5,	1,	23,1,0,1,	31,1,3,1},	// ORI.L #<data>.L,(xxx).L
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK2.B #<data>.W,(An)	(See CHK2 table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK2.B #<data>.W,(d16,An)	(See CHK2 table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK2.B #<data>.W,(d8,An,Xn)	(See CHK2 table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK2.B #<data>.W,(xxx).W	(See CHK2 table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK2.B #<data>.W,(xxx).L	(See CHK2 table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK2.B #<data>.W,(d16,PC)	(See CHK2 table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK2.B #<data>.W,(d8,PC,Xn)	(See CHK2 table below)
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// BTST.L Dn,Dn
	{2,	0,	14,2,0,0,	16,2,1,0},	// MVPMR.W (d16,An),Dn
	{1,	1,	 9,1,0,0,	11,1,1,0},	// BTST.B Dn,(An)
	{0,	1,	 9,1,0,0,	11,1,1,0},	// BTST.B Dn,(An)+
	{2,	2,	10,1,0,0,	12,1,1,0},	// BTST.B Dn,-(An)
	{2,	2,	10,1,0,0,	14,1,2,0},	// BTST.B Dn,(d16,An)
	{4,	2,	12,1,0,0,	16,1,2,0},	// BTST.B Dn,(d8,An,Xn)
	{2,	2,	10,1,0,0,	14,1,2,0},	// BTST.B Dn,(xxx).W
	{1,	0,	10,1,0,0,	15,1,2,0},	// BTST.B Dn,(xxx).L
	{2,	2,	10,1,0,0,	14,1,2,0},	// BTST.B Dn,(d16,PC)
	{4,	2,	12,1,0,0,	16,1,2,0},	// BTST.B Dn,(d8,PC,Xn)
	{2,	0,	 6,0,0,0,	10,0,2,0},	// BTST.B Dn,#<data>.B
	{6,	0,	 6,0,0,0,	 8,0,1,0},	// BCHG.L Dn,Dn
	{2,	0,	38,4,0,0,	40,4,1,0},	// MVPMR.L (d16,An),Dn
	{1,	1,	13,1,0,1,	15,1,1,1},	// BCHG.B Dn,(An)
	{0,	1,	13,1,0,1,	15,1,1,1},	// BCHG.B Dn,(An)+
	{2,	2,	14,1,0,1,	16,1,1,1},	// BCHG.B Dn,-(An)
	{2,	2,	14,1,0,1,	18,1,2,1},	// BCHG.B Dn,(d16,An)
	{4,	2,	16,1,0,1,	20,1,2,1},	// BCHG.B Dn,(d8,An,Xn)
	{2,	2,	14,1,0,1,	18,1,2,1},	// BCHG.B Dn,(xxx).W
	{1,	0,	14,1,0,1,	19,1,2,1},	// BCHG.B Dn,(xxx).L
	{2,	2,	14,1,0,1,	18,1,2,1},	// BCHG.B Dn,(d16,PC)
	{4,	2,	16,1,0,1,	20,1,2,1},	// BCHG.B Dn,(d8,PC,Xn)
	{6,	0,	 6,0,0,0,	 8,0,1,0},	// BCLR.L Dn,Dn
	{4,	0,	14,0,0,2,	16,0,1,2},	// MVPRM.W Dn,(d16,An)
	{1,	1,	13,1,0,1,	15,1,1,1},	// BCLR.B Dn,(An)
	{0,	1,	13,1,0,1,	15,1,1,1},	// BCLR.B Dn,(An)+
	{2,	2,	14,1,0,1,	16,1,1,1},	// BCLR.B Dn,-(An)
	{2,	2,	14,1,0,1,	18,1,2,1},	// BCLR.B Dn,(d16,An)
	{4,	2,	16,1,0,1,	20,1,2,1},	// BCLR.B Dn,(d8,An,Xn)
	{2,	2,	14,1,0,1,	18,1,2,1},	// BCLR.B Dn,(xxx).W
	{1,	0,	14,1,0,1,	19,1,2,1},	// BCLR.B Dn,(xxx).L
	{2,	2,	14,1,0,1,	18,1,2,1},	// BCLR.B Dn,(d16,PC)
	{4,	2,	16,1,0,1,	20,1,2,1},	// BCLR.B Dn,(d8,PC,Xn)
	{6,	0,	 6,0,0,0,	 8,0,1,0},	// BSET.L Dn,Dn
	{4,	0,	38,0,0,4,	40,0,1,4},	// MVPRM.L Dn,(d16,An)
	{1,	1,	13,1,0,1,	15,1,1,1},	// BSET.B Dn,(An)
	{0,	1,	13,1,0,1,	15,1,1,1},	// BSET.B Dn,(An)+
	{2,	2,	14,1,0,1,	16,1,1,1},	// BSET.B Dn,-(An)
	{2,	2,	14,1,0,1,	18,1,2,1},	// BSET.B Dn,(d16,An)
	{4,	2,	16,1,0,1,	20,1,2,1},	// BSET.B Dn,(d8,An,Xn)
	{2,	2,	14,1,0,1,	18,1,2,1},	// BSET.B Dn,(xxx).W
	{1,	0,	14,1,0,1,	19,1,2,1},	// BSET.B Dn,(xxx).L
	{2,	2,	14,1,0,1,	18,1,2,1},	// BSET.B Dn,(d16,PC)
	{4,	2,	16,1,0,1,	20,1,2,1},	// BSET.B Dn,(d8,PC,Xn)
	{6,	0,	 4,0,0,0,	 8,0,2,0},	// ANDI.B #<data>.W,Dn
	{1,	2,	10,1,0,1,	16,1,2,1},	// ANDI.B #<data>.W,(An)
	{2,	2,	12,1,0,1,	17,1,2,1},	// ANDI.B #<data>.W,(An)+
	{2,	3,	11,1,0,1,	16,1,2,1},	// ANDI.B #<data>.W,-(An)
	{2,	1,	11,1,0,1,	17,1,2,1},	// ANDI.B #<data>.W,(d16,An)
	{6,	3,	15,1,0,1,	22,1,3,1},	// ANDI.B #<data>.W,(d8,An,Xn)
	{4,	3,	13,1,0,1,	18,1,2,1},	// ANDI.B #<data>.W,(xxx).W
	{3,	1,	13,1,0,1,	21,1,3,1},	// ANDI.B #<data>.W,(xxx).L
	{4,	0,	12,0,0,0,	18,0,2,0},	// ANDI.B #<data>.W, SR
	{6,	0,	 4,0,0,0,	 8,0,2,0},	// ANDI.W #<data>.W,Dn
	{1,	2,	10,1,0,1,	16,1,2,1},	// ANDI.W #<data>.W,(An)
	{2,	2,	12,1,0,1,	17,1,2,1},	// ANDI.W #<data>.W,(An)+
	{2,	3,	11,1,0,1,	16,1,2,1},	// ANDI.W #<data>.W,-(An)
	{2,	1,	11,1,0,1,	17,1,2,1},	// ANDI.W #<data>.W,(d16,An)
	{6,	3,	15,1,0,1,	22,1,3,1},	// ANDI.W #<data>.W,(d8,An,Xn)
	{4,	3,	13,1,0,1,	18,1,2,1},	// ANDI.W #<data>.W,(xxx).W
	{3,	1,	13,1,0,1,	21,1,3,1},	// ANDI.W #<data>.W,(xxx).L
	{4,	0,	12,0,0,0,	18,0,2,0},	// ANDI.W #<data>.W, SR
	{8,	0,	 6,0,0,0,	10,0,2,0},	// ANDI.L #<data>.L,Dn
	{1,	1,	19,1,0,1,	25,1,2,1},	// ANDI.L #<data>.L,(An)
	{4,	2,	22,1,0,1,	27,1,2,1},	// ANDI.L #<data>.L,(An)+
	{2,	1,	19,1,0,1,	25,1,2,1},	// ANDI.L #<data>.L,-(An)
	{4,	1,	21,1,0,1,	30,1,3,1},	// ANDI.L #<data>.L,(d16,An)
	{8,	3,	25,1,0,1,	32,1,3,1},	// ANDI.L #<data>.L,(d8,An,Xn)
	{6,	3,	23,1,0,1,	30,1,3,1},	// ANDI.L #<data>.L,(xxx).W
	{5,	1,	23,1,0,1,	31,1,3,1},	// ANDI.L #<data>.L,(xxx).L
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK2.W #<data>.W,(An)	(See CHK2 table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK2.W #<data>.W,(d16,An)	(See CHK2 table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK2.W #<data>.W,(d8,An,Xn)	(See CHK2 table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK2.W #<data>.W,(xxx).W	(See CHK2 table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK2.W #<data>.W,(xxx).L	(See CHK2 table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK2.W #<data>.W,(d16,PC)	(See CHK2 table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK2.W #<data>.W,(d8,PC,Xn)	(See CHK2 table below)
	{6,	0,	 4,0,0,0,	 8,0,2,0},	// SUBI.B #<data>.W,Dn
	{1,	2,	10,1,0,1,	16,1,2,1},	// SUBI.B #<data>.W,(An)
	{2,	2,	12,1,0,1,	17,1,2,1},	// SUBI.B #<data>.W,(An)+
	{2,	3,	11,1,0,1,	16,1,2,1},	// SUBI.B #<data>.W,-(An)
	{2,	1,	11,1,0,1,	17,1,2,1},	// SUBI.B #<data>.W,(d16,An)
	{6,	3,	15,1,0,1,	22,1,3,1},	// SUBI.B #<data>.W,(d8,An,Xn)
	{4,	3,	13,1,0,1,	18,1,2,1},	// SUBI.B #<data>.W,(xxx).W
	{3,	1,	13,1,0,1,	21,1,3,1},	// SUBI.B #<data>.W,(xxx).L
	{6,	0,	 4,0,0,0,	 8,0,2,0},	// SUBI.W #<data>.W,Dn
	{1,	2,	10,1,0,1,	16,1,2,1},	// SUBI.W #<data>.W,(An)
	{2,	2,	12,1,0,1,	17,1,2,1},	// SUBI.W #<data>.W,(An)+
	{2,	3,	11,1,0,1,	16,1,2,1},	// SUBI.W #<data>.W,-(An)
	{2,	1,	11,1,0,1,	17,1,2,1},	// SUBI.W #<data>.W,(d16,An)
	{6,	3,	15,1,0,1,	22,1,3,1},	// SUBI.W #<data>.W,(d8,An,Xn)
	{4,	3,	13,1,0,1,	18,1,2,1},	// SUBI.W #<data>.W,(xxx).W
	{3,	1,	13,1,0,1,	21,1,3,1},	// SUBI.W #<data>.W,(xxx).L
	{8,	0,	 6,0,0,0,	10,0,2,0},	// SUBI.L #<data>.L,Dn
	{1,	1,	19,1,0,1,	25,1,2,1},	// SUBI.L #<data>.L,(An)
	{4,	2,	22,1,0,1,	27,1,2,1},	// SUBI.L #<data>.L,(An)+
	{2,	1,	19,1,0,1,	25,1,2,1},	// SUBI.L #<data>.L,-(An)
	{4,	1,	21,1,0,1,	30,1,3,1},	// SUBI.L #<data>.L,(d16,An)
	{8,	3,	25,1,0,1,	32,1,3,1},	// SUBI.L #<data>.L,(d8,An,Xn)
	{6,	3,	23,1,0,1,	30,1,3,1},	// SUBI.L #<data>.L,(xxx).W
	{5,	1,	23,1,0,1,	31,1,3,1},	// SUBI.L #<data>.L,(xxx).L
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK2.L #<data>.W,(An)	(See CHK2 table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK2.L #<data>.W,(d16,An)	(See CHK2 table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK2.L #<data>.W,(d8,An,Xn)	(See CHK2 table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK2.L #<data>.W,(xxx).W	(See CHK2 table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK2.L #<data>.W,(xxx).L	(See CHK2 table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK2.L #<data>.W,(d16,PC)	(See CHK2 table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK2.L #<data>.W,(d8,PC,Xn)	(See CHK2 table below)
	{6,	0,	 4,0,0,0,	 8,0,2,0},	// ADDI.B #<data>.W,Dn
	{1,	2,	10,1,0,1,	16,1,2,1},	// ADDI.B #<data>.W,(An)
	{2,	2,	12,1,0,1,	17,1,2,1},	// ADDI.B #<data>.W,(An)+
	{2,	3,	11,1,0,1,	16,1,2,1},	// ADDI.B #<data>.W,-(An)
	{2,	1,	11,1,0,1,	17,1,2,1},	// ADDI.B #<data>.W,(d16,An)
	{6,	3,	15,1,0,1,	22,1,3,1},	// ADDI.B #<data>.W,(d8,An,Xn)
	{4,	3,	13,1,0,1,	18,1,2,1},	// ADDI.B #<data>.W,(xxx).W
	{3,	1,	13,1,0,1,	21,1,3,1},	// ADDI.B #<data>.W,(xxx).L
	{6,	0,	 4,0,0,0,	 8,0,2,0},	// ADDI.W #<data>.W,Dn
	{1,	2,	10,1,0,1,	16,1,2,1},	// ADDI.W #<data>.W,(An)
	{2,	2,	12,1,0,1,	17,1,2,1},	// ADDI.W #<data>.W,(An)+
	{2,	3,	11,1,0,1,	16,1,2,1},	// ADDI.W #<data>.W,-(An)
	{2,	1,	11,1,0,1,	17,1,2,1},	// ADDI.W #<data>.W,(d16,An)
	{6,	3,	15,1,0,1,	22,1,3,1},	// ADDI.W #<data>.W,(d8,An,Xn)
	{4,	3,	13,1,0,1,	18,1,2,1},	// ADDI.W #<data>.W,(xxx).W
	{3,	1,	13,1,0,1,	21,1,3,1},	// ADDI.W #<data>.W,(xxx).L
	{8,	0,	 6,0,0,0,	10,0,2,0},	// ADDI.L #<data>.L,Dn
	{1,	1,	19,1,0,1,	25,1,2,1},	// ADDI.L #<data>.L,(An)
	{4,	2,	22,1,0,1,	27,1,2,1},	// ADDI.L #<data>.L,(An)+
	{2,	1,	19,1,0,1,	25,1,2,1},	// ADDI.L #<data>.L,-(An)
	{4,	1,	21,1,0,1,	30,1,3,1},	// ADDI.L #<data>.L,(d16,An)
	{8,	3,	25,1,0,1,	32,1,3,1},	// ADDI.L #<data>.L,(d8,An,Xn)
	{6,	3,	23,1,0,1,	30,1,3,1},	// ADDI.L #<data>.L,(xxx).W
	{5,	1,	23,1,0,1,	31,1,3,1},	// ADDI.L #<data>.L,(xxx).L
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// RTM.L Dn			/* Not present in 68030 */
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// RTM.L An			/* Not present in 68030 */
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CALLM.L (An)			/* Not present in 68030 */
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CALLM.L (d16,An)		/* Not present in 68030 */
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CALLM.L (d8,An,Xn)		/* Not present in 68030 */
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CALLM.L (xxx).W		/* Not present in 68030 */
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CALLM.L (xxx).L		/* Not present in 68030 */
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CALLM.L (d16,PC)		/* Not present in 68030 */
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CALLM.L (d8,PC,Xn)		/* Not present in 68030 */
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// BTST.L #<data>.W,Dn
	{1,	1,	 9,1,0,0,	14,1,2,0},	// BTST.B #<data>.W,(An)
	{2,	1,	11,1,0,0,	15,1,2,0},	// BTST.B #<data>.W,(An)+
	{2,	2,	10,1,0,0,	14,1,2,0},	// BTST.B #<data>.W,-(An)
	{2,	0,	10,1,0,0,	15,1,2,0},	// BTST.B #<data>.W,(d16,An)
	{6,	2,	14,1,0,0,	20,1,3,0},	// BTST.B #<data>.W,(d8,An,Xn)
	{4,	2,	12,1,0,0,	16,1,2,0},	// BTST.B #<data>.W,(xxx).W
	{3,	0,	12,1,0,0,	19,1,3,0},	// BTST.B #<data>.W,(xxx).L
	{2,	0,	10,1,0,0,	15,1,2,0},	// BTST.B #<data>.W,(d16,PC)
	{6,	2,	14,1,0,0,	20,1,3,0},	// BTST.B #<data>.W,(d8,PC,Xn)
	{6,	0,	 6,0,0,0,	 8,0,1,0},	// BCHG.L #<data>.W,Dn
	{1,	1,	13,1,0,1,	18,1,2,1},	// BCHG.B #<data>.W,(An)
	{2,	1,	15,1,0,1,	19,1,2,1},	// BCHG.B #<data>.W,(An)+
	{2,	2,	14,1,0,1,	18,1,2,1},	// BCHG.B #<data>.W,-(An)
	{2,	0,	14,1,0,1,	19,1,2,1},	// BCHG.B #<data>.W,(d16,An)
	{6,	2,	18,1,0,1,	24,1,3,1},	// BCHG.B #<data>.W,(d8,An,Xn)
	{4,	2,	16,1,0,1,	20,1,2,1},	// BCHG.B #<data>.W,(xxx).W
	{3,	0,	16,1,0,1,	23,1,3,1},	// BCHG.B #<data>.W,(xxx).L
	{2,	0,	14,1,0,1,	19,1,2,1},	// BCHG.B #<data>.W,(d16,PC)
	{6,	2,	18,1,0,1,	24,1,3,1},	// BCHG.B #<data>.W,(d8,PC,Xn)
	{6,	0,	 6,0,0,0,	 8,0,1,0},	// BCLR.L #<data>.W,Dn
	{1,	1,	13,1,0,1,	18,1,2,1},	// BCLR.B #<data>.W,(An)
	{2,	1,	15,1,0,1,	19,1,2,1},	// BCLR.B #<data>.W,(An)+
	{2,	2,	14,1,0,1,	18,1,2,1},	// BCLR.B #<data>.W,-(An)
	{2,	0,	14,1,0,1,	19,1,2,1},	// BCLR.B #<data>.W,(d16,An)
	{6,	2,	18,1,0,1,	24,1,3,1},	// BCLR.B #<data>.W,(d8,An,Xn)
	{4,	2,	16,1,0,1,	20,1,2,1},	// BCLR.B #<data>.W,(xxx).W
	{3,	0,	16,1,0,1,	23,1,3,1},	// BCLR.B #<data>.W,(xxx).L
	{2,	0,	14,1,0,1,	19,1,2,1},	// BCLR.B #<data>.W,(d16,PC)
	{6,	2,	18,1,0,1,	24,1,3,1},	// BCLR.B #<data>.W,(d8,PC,Xn)
	{6,	0,	 6,0,0,0,	 8,0,1,0},	// BSET.L #<data>.W,Dn
	{1,	1,	13,1,0,1,	18,1,2,1},	// BSET.B #<data>.W,(An)
	{2,	1,	15,1,0,1,	19,1,2,1},	// BSET.B #<data>.W,(An)+
	{2,	2,	14,1,0,1,	18,1,2,1},	// BSET.B #<data>.W,-(An)
	{2,	0,	14,1,0,1,	19,1,2,1},	// BSET.B #<data>.W,(d16,An)
	{6,	2,	18,1,0,1,	24,1,3,1},	// BSET.B #<data>.W,(d8,An,Xn)
	{4,	2,	16,1,0,1,	20,1,2,1},	// BSET.B #<data>.W,(xxx).W
	{3,	0,	16,1,0,1,	23,1,3,1},	// BSET.B #<data>.W,(xxx).L
	{2,	0,	14,1,0,1,	19,1,2,1},	// BSET.B #<data>.W,(d16,PC)
	{6,	2,	18,1,0,1,	24,1,3,1},	// BSET.B #<data>.W,(d8,PC,Xn)
	{6,	0,	 4,0,0,0,	 8,0,2,0},	// EORI.B #<data>.W,Dn
	{1,	2,	10,1,0,1,	16,1,2,1},	// EORI.B #<data>.W,(An)
	{2,	2,	12,1,0,1,	17,1,2,1},	// EORI.B #<data>.W,(An)+
	{2,	3,	11,1,0,1,	16,1,2,1},	// EORI.B #<data>.W,-(An)
	{2,	1,	11,1,0,1,	17,1,2,1},	// EORI.B #<data>.W,(d16,An)
	{6,	3,	15,1,0,1,	22,1,3,1},	// EORI.B #<data>.W,(d8,An,Xn)
	{4,	3,	13,1,0,1,	18,1,2,1},	// EORI.B #<data>.W,(xxx).W
	{3,	1,	13,1,0,1,	21,1,3,1},	// EORI.B #<data>.W,(xxx).L
	{4,	0,	12,0,0,0,	18,0,2,0},	// EORI.B #<data>.W, SR
	{6,	0,	 4,0,0,0,	 8,0,2,0},	// EORI.W #<data>.W,Dn
	{1,	2,	10,1,0,1,	16,1,2,1},	// EORI.W #<data>.W,(An)
	{2,	2,	12,1,0,1,	17,1,2,1},	// EORI.W #<data>.W,(An)+
	{2,	3,	11,1,0,1,	16,1,2,1},	// EORI.W #<data>.W,-(An)
	{2,	1,	11,1,0,1,	17,1,2,1},	// EORI.W #<data>.W,(d16,An)
	{6,	3,	15,1,0,1,	22,1,3,1},	// EORI.W #<data>.W,(d8,An,Xn)
	{4,	3,	13,1,0,1,	18,1,2,1},	// EORI.W #<data>.W,(xxx).W
	{3,	1,	13,1,0,1,	21,1,3,1},	// EORI.W #<data>.W,(xxx).L
	{4,	0,	12,0,0,0,	18,0,2,0},	// EORI.W #<data>.W, SR
	{8,	0,	 6,0,0,0,	10,0,2,0},	// EORI.L #<data>.L,Dn
	{1,	1,	19,1,0,1,	25,1,2,1},	// EORI.L #<data>.L,(An)
	{4,	2,	22,1,0,1,	27,1,2,1},	// EORI.L #<data>.L,(An)+
	{2,	1,	19,1,0,1,	25,1,2,1},	// EORI.L #<data>.L,-(An)
	{4,	1,	21,1,0,1,	30,1,3,1},	// EORI.L #<data>.L,(d16,An)
	{8,	3,	25,1,0,1,	32,1,3,1},	// EORI.L #<data>.L,(d8,An,Xn)
	{6,	3,	23,1,0,1,	30,1,3,1},	// EORI.L #<data>.L,(xxx).W
	{5,	1,	23,1,0,1,	31,1,3,1},	// EORI.L #<data>.L,(xxx).L
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CAS.B #<data>.W,(An)		(See CAS table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CAS.B #<data>.W,(An)+	(See CAS table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CAS.B #<data>.W,-(An)	(See CAS table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CAS.B #<data>.W,(d16,An)	(See CAS table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CAS.B #<data>.W,(d8,An,Xn)	(See CAS table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CAS.B #<data>.W,(xxx).W	(See CAS table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CAS.B #<data>.W,(xxx).L	(See CAS table below)
	{6,	0,	 4,0,0,0,	 8,0,2,0},	// CMPI.B #<data>.B,Dn
	{1,	1,	 7,1,0,0,	12,1,2,0},	// CMPI.B #<data>.W,(An)
	{2,	1,	 9,1,0,0,	13,1,2,0},	// CMPI.B #<data>.W,(An)+
	{2,	2,	 8,1,0,0,	12,1,2,0},	// CMPI.B #<data>.W,-(An)
	{2,	0,	 8,1,0,0,	13,1,2,0},	// CMPI.B #<data>.W,(d16,An)
	{6,	2,	12,1,0,0,	18,1,3,0},	// CMPI.B #<data>.W,(d8,An,Xn)
	{4,	2,	10,1,0,0,	14,1,2,0},	// CMPI.B #<data>.W,(xxx).W
	{3,	0,	10,1,0,0,	17,1,3,0},	// CMPI.B #<data>.W,(xxx).L
	{2,	0,	 8,1,0,0,	13,1,2,0},	// CMPI.B #<data>.W,(d16,PC)
	{6,	2,	12,1,0,0,	18,1,3,0},	// CMPI.B #<data>.W,(d8,PC,Xn)
	{6,	0,	 4,0,0,0,	 8,0,2,0},	// CMPI.W #<data>.W,Dn
	{1,	1,	 7,1,0,0,	12,1,2,0},	// CMPI.W #<data>.W,(An)
	{2,	1,	 9,1,0,0,	13,1,2,0},	// CMPI.W #<data>.W,(An)+
	{2,	2,	 8,1,0,0,	12,1,2,0},	// CMPI.W #<data>.W,-(An)
	{2,	0,	 8,1,0,0,	13,1,2,0},	// CMPI.W #<data>.W,(d16,An)
	{6,	2,	12,1,0,0,	18,1,3,0},	// CMPI.W #<data>.W,(d8,An,Xn)
	{4,	2,	10,1,0,0,	14,1,2,0},	// CMPI.W #<data>.W,(xxx).W
	{3,	0,	10,1,0,0,	17,1,3,0},	// CMPI.W #<data>.W,(xxx).L
	{2,	0,	 8,1,0,0,	13,1,2,0},	// CMPI.W #<data>.W,(d16,PC)
	{6,	2,	12,1,0,0,	18,1,3,0},	// CMPI.W #<data>.W,(d8,PC,Xn)
	{8,	0,	 6,0,0,0,	10,0,2,0},	// CMPI.L #<data>.L,Dn
	{1,	0,	12,1,0,0,	17,1,2,0},	// CMPI.L #<data>.L,(An)
	{4,	1,	15,1,0,0,	19,1,2,0},	// CMPI.L #<data>.L,(An)+
	{2,	0,	12,1,0,0,	17,1,2,0},	// CMPI.L #<data>.L,-(An)
	{4,	0,	14,1,0,0,	22,1,3,0},	// CMPI.L #<data>.L,(d16,An)
	{8,	2,	18,1,0,0,	24,1,3,0},	// CMPI.L #<data>.L,(d8,An,Xn)
	{6,	2,	16,1,0,0,	22,1,3,0},	// CMPI.L #<data>.L,(xxx).W
	{5,	0,	16,1,0,0,	23,1,3,0},	// CMPI.L #<data>.L,(xxx).L
	{4,	0,	14,1,0,0,	22,1,3,0},	// CMPI.L #<data>.L,(d16,PC)
	{8,	2,	18,1,0,0,	24,1,3,0},	// CMPI.L #<data>.L,(d8,PC,Xn)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CAS.W #<data>.W,(An)		(See CAS table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CAS.W #<data>.W,(An)+	(See CAS table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CAS.W #<data>.W,-(An)	(See CAS table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CAS.W #<data>.W,(d16,An)	(See CAS table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CAS.W #<data>.W,(d8,An,Xn)	(See CAS table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CAS.W #<data>.W,(xxx).W	(See CAS table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CAS.W #<data>.W,(xxx).L	(See CAS table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CAS2.W #<data>.L		(See CAS2 table below)
	{},	// MOVES.B #<data>.W,(An)
	{},	// MOVES.B #<data>.W,(An)+
	{},	// MOVES.B #<data>.W,-(An)
	{},	// MOVES.B #<data>.W,(d16,An)
	{},	// MOVES.B #<data>.W,(d8,An,Xn)
	{},	// MOVES.B #<data>.W,(xxx).W
	{},	// MOVES.B #<data>.W,(xxx).L
	{},	// MOVES.W #<data>.W,(An)
	{},	// MOVES.W #<data>.W,(An)+
	{},	// MOVES.W #<data>.W,-(An)
	{},	// MOVES.W #<data>.W,(d16,An)
	{},	// MOVES.W #<data>.W,(d8,An,Xn)
	{},	// MOVES.W #<data>.W,(xxx).W
	{},	// MOVES.W #<data>.W,(xxx).L
	{},	// MOVES.L #<data>.W,(An)
	{},	// MOVES.L #<data>.W,(An)+
	{},	// MOVES.L #<data>.W,-(An)
	{},	// MOVES.L #<data>.W,(d16,An)
	{},	// MOVES.L #<data>.W,(d8,An,Xn)
	{},	// MOVES.L #<data>.W,(xxx).W
	{},	// MOVES.L #<data>.W,(xxx).L
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CAS.L #<data>.W,(An)		(See CAS table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CAS.L #<data>.W,(An)+	(See CAS table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CAS.L #<data>.W,-(An)	(See CAS table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CAS.L #<data>.W,(d16,An)	(See CAS table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CAS.L #<data>.W,(d8,An,Xn)	(See CAS table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CAS.L #<data>.W,(xxx).W	(See CAS table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CAS.L #<data>.W,(xxx).L	(See CAS table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CAS2.L #<data>.L		(See CAS2 table below)
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// MOVE.B Dn,Dn
	{1,	1,	 7,1,0,0,	 9,1,1,0},	// MOVE.B (An),Dn
	{0,	1,	 7,1,0,0,	 9,1,1,0},	// MOVE.B (An)+,Dn
	{2,	2,	 8,1,0,0,	10,1,1,0},	// MOVE.B -(An),Dn
	{2,	2,	 8,1,0,0,	12,1,1,0},	// MOVE.B (d16,An),Dn
	{4,	2,	10,1,0,0,	14,1,2,0},	// MOVE.B (d8,An,Xn),Dn
	{2,	2,	 8,1,0,0,	12,1,2,0},	// MOVE.B (xxx).W,Dn
	{1,	0,	 8,1,0,0,	13,1,2,0},	// MOVE.B (xxx).L,Dn
	{2,	2,	 8,1,0,0,	12,1,2,0},	// MOVE.B (d16,PC),Dn
	{4,	2,	10,1,0,0,	14,1,2,0},	// MOVE.B (d8,PC,Xn),Dn
	{2,	0,	 4,0,0,0,	 8,0,2,0},	// MOVE.B #<data>.B,Dn
	{0,	1,	 5,0,0,1,	 8,0,1,1},	// MOVE.B Dn,(An)
	{3,	1,	11,1,0,1,	14,1,1,1},	// MOVE.B (An),(An)
	{2,	1,	11,1,0,1,	14,1,1,1},	// MOVE.B (An)+,(An)
	{4,	2,	12,1,0,1,	15,1,1,1},	// MOVE.B -(An),(An)
	{4,	2,	12,1,0,1,	17,1,2,1},	// MOVE.B (d16,An),(An)
	{6,	2,	14,1,0,1,	19,1,2,1},	// MOVE.B (d8,An,Xn),(An)
	{4,	2,	12,1,0,1,	17,1,2,1},	// MOVE.B (xxx).W,(An)
	{3,	0,	12,1,0,1,	18,1,2,1},	// MOVE.B (xxx).L,(An)
	{4,	2,	12,1,0,1,	17,1,2,1},	// MOVE.B (d16,PC),(An)
	{6,	2,	14,1,0,1,	19,1,2,1},	// MOVE.B (d8,PC,Xn),(An)
	{4,	0,	 8,0,0,1,	13,0,2,1},	// MOVE.B #<data>.B,(An)
	{0,	1,	 5,0,0,1,	 8,0,1,1},	// MOVE.B Dn,(An)+
	{3,	1,	11,1,0,1,	14,1,1,1},	// MOVE.B (An),(An)+
	{2,	1,	11,1,0,1,	14,1,1,1},	// MOVE.B (An)+,(An)+
	{4,	2,	12,1,0,1,	15,1,1,1},	// MOVE.B -(An),(An)+
	{4,	2,	12,1,0,1,	17,1,2,1},	// MOVE.B (d16,An),(An)+
	{6,	2,	14,1,0,1,	19,1,2,1},	// MOVE.B (d8,An,Xn),(An)+
	{4,	2,	12,1,0,1,	17,1,2,1},	// MOVE.B (xxx).W,(An)+
	{3,	0,	12,1,0,1,	18,1,2,1},	// MOVE.B (xxx).L,(An)+
	{4,	2,	12,1,0,1,	17,1,2,1},	// MOVE.B (d16,PC),(An)+
	{6,	2,	14,1,0,1,	19,1,2,1},	// MOVE.B (d8,PC,Xn),(An)+
	{4,	0,	 8,0,0,1,	13,0,2,1},	// MOVE.B #<data>.B,(An)+
	{0,	2,	 6,0,0,1,	 8,0,1,1},	// MOVE.B Dn,-(An)
	{3,	1,	11,1,0,1,	14,1,1,1},	// MOVE.B (An),-(An)
	{2,	1,	11,1,0,1,	14,1,1,1},	// MOVE.B (An)+,-(An)
	{4,	2,	12,1,0,1,	15,1,1,1},	// MOVE.B -(An),-(An)
	{4,	2,	12,1,0,1,	17,1,2,1},	// MOVE.B (d16,An),-(An)
	{6,	2,	14,1,0,1,	19,1,2,1},	// MOVE.B (d8,An,Xn),-(An)
	{4,	2,	12,1,0,1,	17,1,2,1},	// MOVE.B (xxx).W,-(An)
	{3,	0,	12,1,0,1,	18,1,2,1},	// MOVE.B (xxx).L,-(An)
	{4,	2,	12,1,0,1,	17,1,2,1},	// MOVE.B (d16,PC),-(An)
	{6,	2,	14,1,0,1,	19,1,2,1},	// MOVE.B (d8,PC,Xn),-(An)
	{4,	0,	 8,0,0,1,	13,0,2,1},	// MOVE.B #<data>.B,-(An)
	{2,	0,	 6,0,0,1,	 9,0,1,1},	// MOVE.B Dn,(d16,An)
	{3,	1,	11,1,0,1,	14,1,1,1},	// MOVE.B (An),(d16,An)
	{2,	1,	11,1,0,1,	14,1,1,1},	// MOVE.B (An)+,(d16,An)
	{4,	2,	12,1,0,1,	15,1,1,1},	// MOVE.B -(An),(d16,An)
	{4,	2,	12,1,0,1,	17,1,2,1},	// MOVE.B (d16,An),(d16,An)
	{6,	2,	14,1,0,1,	19,1,2,1},	// MOVE.B (d8,An,Xn),(d16,An)
	{4,	2,	12,1,0,1,	17,1,2,1},	// MOVE.B (xxx).W,(d16,An)
	{3,	0,	12,1,0,1,	18,1,2,1},	// MOVE.B (xxx).L,(d16,An)
	{4,	2,	12,1,0,1,	17,1,2,1},	// MOVE.B (d16,PC),(d16,An)
	{6,	2,	14,1,0,1,	19,1,2,1},	// MOVE.B (d8,PC,Xn),(d16,An)
	{4,	0,	 8,0,0,1,	13,0,2,1},	// MOVE.B #<data>.B,(d16,An)
	{4,	0,	 8,0,0,1,	11,0,1,1},	// MOVE.B Dn,(d8,An,Xn)
	{5,	1,	13,1,0,1,	16,1,1,1},	// MOVE.B (An),(d8,An,Xn)
	{4,	1,	13,1,0,1,	16,1,1,1},	// MOVE.B (An)+,(d8,An,Xn)
	{6,	2,	14,1,0,1,	17,1,1,1},	// MOVE.B -(An),(d8,An,Xn)
	{6,	2,	14,1,0,1,	19,1,2,1},	// MOVE.B (d16,An),(d8,An,Xn)
	{8,	2,	12,1,0,1,	13,1,2,1},	// MOVE.B (d8,An,Xn),(d8,An,Xn)
	{6,	2,	14,1,0,1,	19,1,2,1},	// MOVE.B (xxx).W,(d8,An,Xn)
	{5,	0,	14,1,0,1,	20,1,2,1},	// MOVE.B (xxx).L,(d8,An,Xn)
	{6,	2,	14,1,0,1,	19,1,2,1},	// MOVE.B (d16,PC),(d8,An,Xn)
	{8,	2,	12,1,0,1,	13,1,2,1},	// MOVE.B (d8,PC,Xn),(d8,An,Xn)
	{6,	0,	10,0,0,1,	15,0,2,1},	// MOVE.B #<data>.B,(d8,An,Xn)
	{4,	0,	 8,0,0,1,	11,0,1,1},	// MOVE.B Dn,(xxx).W
	{5,	1,	13,1,0,1,	16,1,1,1},	// MOVE.B (An),(xxx).W
	{4,	1,	13,1,0,1,	16,1,1,1},	// MOVE.B (An)+,(xxx).W
	{6,	2,	14,1,0,1,	17,1,1,1},	// MOVE.B -(An),(xxx).W
	{6,	2,	14,1,0,1,	19,1,2,1},	// MOVE.B (d16,An),(xxx).W
	{8,	2,	12,1,0,1,	13,1,2,1},	// MOVE.B (d8,An,Xn),(xxx).W
	{6,	2,	14,1,0,1,	19,1,2,1},	// MOVE.B (xxx).W,(xxx).W
	{5,	0,	14,1,0,1,	20,1,2,1},	// MOVE.B (xxx).L,(xxx).W
	{6,	2,	14,1,0,1,	19,1,2,1},	// MOVE.B (d16,PC),(xxx).W
	{8,	2,	12,1,0,1,	13,1,2,1},	// MOVE.B (d8,PC,Xn),(xxx).W
	{6,	0,	10,0,0,1,	15,0,2,1},	// MOVE.B #<data>.B,(xxx).W
	{0,	0,	 8,0,0,1,	13,0,2,1},	// MOVE.B Dn,(xxx).L
	{1,	1,	13,1,0,1,	18,1,2,1},	// MOVE.B (An),(xxx).L
	{0,	1,	13,1,0,1,	18,1,2,1},	// MOVE.B (An)+,(xxx).L
	{2,	2,	14,1,0,1,	19,1,2,1},	// MOVE.B -(An),(xxx).L
	{2,	2,	14,1,0,1,	21,1,3,1},	// MOVE.B (d16,An),(xxx).L
	{4,	2,	16,1,0,1,	23,1,3,1},	// MOVE.B (d8,An,Xn),(xxx).L
	{2,	2,	14,1,0,1,	21,1,3,1},	// MOVE.B (xxx).W,(xxx).L
	{1,	0,	14,1,0,1,	22,1,3,1},	// MOVE.B (xxx).L,(xxx).L
	{2,	2,	14,1,0,1,	21,1,3,1},	// MOVE.B (d16,PC),(xxx).L
	{4,	2,	16,1,0,1,	23,1,3,1},	// MOVE.B (d8,PC,Xn),(xxx).L
	{2,	0,	10,0,0,1,	17,0,3,1},	// MOVE.B #<data>.B,(xxx).L
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// MOVE.L Dn,Dn
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// MOVE.L An,Dn
	{1,	1,	11,1,0,0,	13,1,1,0},	// MOVE.L (An),Dn
	{0,	1,	11,1,0,0,	13,1,1,0},	// MOVE.L (An)+,Dn
	{2,	2,	12,1,0,0,	14,1,1,0},	// MOVE.L -(An),Dn
	{2,	2,	12,1,0,0,	16,1,1,0},	// MOVE.L (d16,An),Dn
	{4,	2,	14,1,0,0,	18,1,2,0},	// MOVE.L (d8,An,Xn),Dn
	{2,	2,	12,1,0,0,	16,1,2,0},	// MOVE.L (xxx).W,Dn
	{1,	0,	12,1,0,0,	17,1,2,0},	// MOVE.L (xxx).L,Dn
	{2,	2,	12,1,0,0,	16,1,2,0},	// MOVE.L (d16,PC),Dn
	{4,	2,	14,1,0,0,	18,1,2,0},	// MOVE.L (d8,PC,Xn),Dn
	{4,	0,	 6,0,0,0,	10,0,2,0},	// MOVE.L #<data>.L,Dn
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// MOVEA.L Dn,An
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// MOVEA.L An,An
	{1,	1,	11,1,0,0,	13,1,1,0},	// MOVEA.L (An),An
	{0,	1,	11,1,0,0,	13,1,1,0},	// MOVEA.L (An)+,An
	{2,	2,	12,1,0,0,	14,1,1,0},	// MOVEA.L -(An),An
	{2,	2,	12,1,0,0,	16,1,1,0},	// MOVEA.L (d16,An),An
	{4,	2,	14,1,0,0,	18,1,2,0},	// MOVEA.L (d8,An,Xn),An
	{2,	2,	12,1,0,0,	16,1,2,0},	// MOVEA.L (xxx).W,An
	{1,	0,	12,1,0,0,	17,1,2,0},	// MOVEA.L (xxx).L,An
	{2,	2,	12,1,0,0,	16,1,2,0},	// MOVEA.L (d16,PC),An
	{4,	2,	14,1,0,0,	18,1,2,0},	// MOVEA.L (d8,PC,Xn),An
	{4,	0,	 6,0,0,0,	10,0,2,0},	// MOVEA.L #<data>.L,An
	{0,	1,	 9,0,0,1,	12,0,1,1},	// MOVE.L Dn,(An)
	{0,	1,	 9,0,0,1,	12,0,1,1},	// MOVE.L An,(An)
	{3,	1,	19,1,0,1,	22,1,1,1},	// MOVE.L (An),(An)
	{2,	1,	19,1,0,1,	22,1,1,1},	// MOVE.L (An)+,(An)
	{4,	2,	20,1,0,1,	25,1,1,1},	// MOVE.L -(An),(An)
	{4,	2,	20,1,0,1,	25,1,2,1},	// MOVE.L (d16,An),(An)
	{6,	2,	22,1,0,1,	27,1,2,1},	// MOVE.L (d8,An,Xn),(An)
	{4,	2,	20,1,0,1,	25,1,2,1},	// MOVE.L (xxx).W,(An)
	{3,	0,	20,1,0,1,	26,1,2,1},	// MOVE.L (xxx).L,(An)
	{4,	2,	20,1,0,1,	25,1,2,1},	// MOVE.L (d16,PC),(An)
	{6,	2,	22,1,0,1,	27,1,2,1},	// MOVE.L (d8,PC,Xn),(An)
	{6,	0,	14,0,0,1,	19,0,2,1},	// MOVE.L #<data>.L,(An)
	{0,	1,	 9,0,0,1,	12,0,1,1},	// MOVE.L Dn,(An)+
	{0,	1,	 9,0,0,1,	12,0,1,1},	// MOVE.L An,(An)+
	{3,	1,	19,1,0,1,	22,1,1,1},	// MOVE.L (An),(An)+
	{2,	1,	19,1,0,1,	22,1,1,1},	// MOVE.L (An)+,(An)+
	{4,	2,	20,1,0,1,	25,1,1,1},	// MOVE.L -(An),(An)+
	{4,	2,	20,1,0,1,	25,1,2,1},	// MOVE.L (d16,An),(An)+
	{6,	2,	22,1,0,1,	27,1,2,1},	// MOVE.L (d8,An,Xn),(An)+
	{4,	2,	20,1,0,1,	25,1,2,1},	// MOVE.L (xxx).W,(An)+
	{3,	0,	20,1,0,1,	26,1,2,1},	// MOVE.L (xxx).L,(An)+
	{4,	2,	20,1,0,1,	25,1,2,1},	// MOVE.L (d16,PC),(An)+
	{6,	2,	22,1,0,1,	27,1,2,1},	// MOVE.L (d8,PC,Xn),(An)+
	{6,	0,	14,0,0,1,	19,0,2,1},	// MOVE.L #<data>.L,(An)+
	{0,	2,	10,0,0,1,	12,0,1,1},	// MOVE.L Dn,-(An)
	{0,	2,	10,0,0,1,	12,0,1,1},	// MOVE.L An,-(An)
	{3,	1,	19,1,0,1,	22,1,1,1},	// MOVE.L (An),-(An)
	{2,	1,	19,1,0,1,	22,1,1,1},	// MOVE.L (An)+,-(An)
	{4,	2,	20,1,0,1,	25,1,1,1},	// MOVE.L -(An),-(An)
	{4,	2,	20,1,0,1,	25,1,2,1},	// MOVE.L (d16,An),-(An)
	{6,	2,	22,1,0,1,	27,1,2,1},	// MOVE.L (d8,An,Xn),-(An)
	{4,	2,	20,1,0,1,	25,1,2,1},	// MOVE.L (xxx).W,-(An)
	{3,	0,	20,1,0,1,	26,1,2,1},	// MOVE.L (xxx).L,-(An)
	{4,	2,	20,1,0,1,	25,1,2,1},	// MOVE.L (d16,PC),-(An)
	{6,	2,	22,1,0,1,	27,1,2,1},	// MOVE.L (d8,PC,Xn),-(An)
	{6,	0,	14,0,0,1,	19,0,2,1},	// MOVE.L #<data>.L,-(An)
	{2,	0,	10,0,0,1,	13,0,1,1},	// MOVE.L Dn,(d16,An)
	{2,	0,	10,0,0,1,	13,0,1,1},	// MOVE.L An,(d16,An)
	{3,	1,	19,1,0,1,	22,1,1,1},	// MOVE.L (An),(d16,An)
	{2,	1,	19,1,0,1,	22,1,1,1},	// MOVE.L (An)+,(d16,An)
	{4,	2,	20,1,0,1,	25,1,1,1},	// MOVE.L -(An),(d16,An)
	{4,	2,	20,1,0,1,	25,1,2,1},	// MOVE.L (d16,An),(d16,An)
	{6,	2,	22,1,0,1,	27,1,2,1},	// MOVE.L (d8,An,Xn),(d16,An)
	{4,	2,	20,1,0,1,	25,1,2,1},	// MOVE.L (xxx).W,(d16,An)
	{3,	0,	20,1,0,1,	26,1,2,1},	// MOVE.L (xxx).L,(d16,An)
	{4,	2,	20,1,0,1,	25,1,2,1},	// MOVE.L (d16,PC),(d16,An)
	{6,	2,	22,1,0,1,	27,1,2,1},	// MOVE.L (d8,PC,Xn),(d16,An)
	{6,	0,	14,0,0,1,	19,0,2,1},	// MOVE.L #<data>.L,(d16,An)
	{4,	0,	12,0,0,1,	15,0,1,1},	// MOVE.L Dn,(d8,An,Xn)
	{4,	0,	12,0,0,1,	15,0,1,1},	// MOVE.L An,(d8,An,Xn)
	{5,	1,	21,1,0,1,	24,1,1,1},	// MOVE.L (An),(d8,An,Xn)
	{4,	1,	21,1,0,1,	24,1,1,1},	// MOVE.L (An)+,(d8,An,Xn)
	{6,	2,	22,1,0,1,	25,1,1,1},	// MOVE.L -(An),(d8,An,Xn)
	{6,	2,	22,1,0,1,	27,1,2,1},	// MOVE.L (d16,An),(d8,An,Xn)
	{8,	2,	24,1,0,1,	29,1,2,1},	// MOVE.L (d8,An,Xn),(d8,An,Xn)
	{6,	2,	22,1,0,1,	27,1,2,1},	// MOVE.L (xxx).W,(d8,An,Xn)
	{5,	0,	22,1,0,1,	28,1,2,1},	// MOVE.L (xxx).L,(d8,An,Xn)
	{6,	2,	22,1,0,1,	27,1,2,1},	// MOVE.L (d16,PC),(d8,An,Xn)
	{8,	2,	24,1,0,1,	29,1,2,1},	// MOVE.L (d8,PC,Xn),(d8,An,Xn)
	{8,	0,	16,0,0,1,	21,0,2,1},	// MOVE.L #<data>.L,(d8,An,Xn)
	{2,	0,	10,0,0,1,	13,0,1,1},	// MOVE.L Dn,(xxx).W
	{2,	0,	10,0,0,1,	13,0,1,1},	// MOVE.L An,(xxx).W
	{3,	1,	19,1,0,1,	22,1,1,1},	// MOVE.L (An),(xxx).W
	{2,	1,	19,1,0,1,	22,1,1,1},	// MOVE.L (An)+,(xxx).W
	{4,	2,	20,1,0,1,	25,1,1,1},	// MOVE.L -(An),(xxx).W
	{4,	2,	20,1,0,1,	25,1,2,1},	// MOVE.L (d16,An),(xxx).W
	{6,	2,	22,1,0,1,	27,1,2,1},	// MOVE.L (d8,An,Xn),(xxx).W
	{4,	2,	20,1,0,1,	25,1,2,1},	// MOVE.L (xxx).W,(xxx).W
	{3,	0,	20,1,0,1,	26,1,2,1},	// MOVE.L (xxx).L,(xxx).W
	{4,	2,	20,1,0,1,	25,1,2,1},	// MOVE.L (d16,PC),(xxx).W
	{6,	2,	22,1,0,1,	27,1,2,1},	// MOVE.L (d8,PC,Xn),(xxx).W
	{6,	0,	14,0,0,1,	19,0,2,1},	// MOVE.L #<data>.L,(xxx).W
	{0,	0,	12,0,0,1,	17,0,2,1},	// MOVE.L Dn,(xxx).L
	{0,	0,	12,0,0,1,	17,0,2,1},	// MOVE.L An,(xxx).L
	{1,	1,	21,1,0,1,	26,1,2,1},	// MOVE.L (An),(xxx).L
	{0,	1,	21,1,0,1,	26,1,2,1},	// MOVE.L (An)+,(xxx).L
	{2,	2,	22,1,0,1,	27,1,2,1},	// MOVE.L -(An),(xxx).L
	{2,	2,	22,1,0,1,	29,1,3,1},	// MOVE.L (d16,An),(xxx).L
	{4,	2,	24,1,0,1,	31,1,3,1},	// MOVE.L (d8,An,Xn),(xxx).L
	{2,	2,	22,1,0,1,	29,1,3,1},	// MOVE.L (xxx).W,(xxx).L
	{1,	0,	22,1,0,1,	30,1,3,1},	// MOVE.L (xxx).L,(xxx).L
	{2,	2,	22,1,0,1,	29,1,3,1},	// MOVE.L (d16,PC),(xxx).L
	{4,	2,	24,1,0,1,	31,1,3,1},	// MOVE.L (d8,PC,Xn),(xxx).L
	{4,	0,	16,0,0,1,	23,0,3,1},	// MOVE.L #<data>.L,(xxx).L
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// MOVE.W Dn,Dn
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// MOVE.W An,Dn
	{1,	1,	 7,1,0,0,	 9,1,1,0},	// MOVE.W (An),Dn
	{0,	1,	 7,1,0,0,	 9,1,1,0},	// MOVE.W (An)+,Dn
	{2,	2,	 8,1,0,0,	10,1,1,0},	// MOVE.W -(An),Dn
	{2,	2,	 8,1,0,0,	12,1,1,0},	// MOVE.W (d16,An),Dn
	{4,	2,	10,1,0,0,	14,1,2,0},	// MOVE.W (d8,An,Xn),Dn
	{2,	2,	 8,1,0,0,	12,1,2,0},	// MOVE.W (xxx).W,Dn
	{1,	0,	 8,1,0,0,	13,1,2,0},	// MOVE.W (xxx).L,Dn
	{2,	2,	 8,1,0,0,	12,1,2,0},	// MOVE.W (d16,PC),Dn
	{4,	2,	10,1,0,0,	14,1,2,0},	// MOVE.W (d8,PC,Xn),Dn
	{2,	0,	 4,0,0,0,	 8,0,2,0},	// MOVE.W #<data>.W,Dn
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// MOVEA.W Dn,An
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// MOVEA.W An,An
	{1,	1,	 7,1,0,0,	 9,1,1,0},	// MOVEA.W (An),An
	{0,	1,	 7,1,0,0,	 9,1,1,0},	// MOVEA.W (An)+,An
	{2,	2,	 8,1,0,0,	10,1,1,0},	// MOVEA.W -(An),An
	{2,	2,	 8,1,0,0,	12,1,2,0},	// MOVEA.W (d16,An),An
	{4,	2,	10,1,0,0,	14,1,2,0},	// MOVEA.W (d8,An,Xn),An
	{2,	2,	 8,1,0,0,	12,1,2,0},	// MOVEA.W (xxx).W,An
	{1,	0,	 8,1,0,0,	13,1,2,0},	// MOVEA.W (xxx).L,An
	{2,	2,	 8,1,0,0,	12,1,2,0},	// MOVEA.W (d16,PC),An
	{4,	2,	10,1,0,0,	14,1,2,0},	// MOVEA.W (d8,PC,Xn),An
	{2,	0,	 4,0,0,0,	 8,0,2,0},	// MOVEA.W #<data>.W,An
	{0,	1,	 5,0,0,1,	 8,0,1,1},	// MOVE.W Dn,(An)
	{0,	1,	 5,0,0,1,	 8,0,1,1},	// MOVE.W An,(An)
	{3,	1,	11,1,0,1,	14,1,1,1},	// MOVE.W (An),(An)
	{2,	1,	11,1,0,1,	14,1,1,1},	// MOVE.W (An)+,(An)
	{4,	2,	12,1,0,1,	15,1,1,1},	// MOVE.W -(An),(An)
	{4,	2,	12,1,0,1,	17,1,2,1},	// MOVE.W (d16,An),(An)
	{6,	2,	14,1,0,1,	19,1,2,1},	// MOVE.W (d8,An,Xn),(An)
	{4,	2,	12,1,0,1,	17,1,2,1},	// MOVE.W (xxx).W,(An)
	{3,	0,	12,1,0,1,	18,1,2,1},	// MOVE.W (xxx).L,(An)
	{4,	2,	12,1,0,1,	17,1,2,1},	// MOVE.W (d16,PC),(An)
	{6,	2,	14,1,0,1,	19,1,2,1},	// MOVE.W (d8,PC,Xn),(An)
	{4,	0,	 8,0,0,1,	13,0,2,1},	// MOVE.W #<data>.W,(An)
	{0,	1,	 5,0,0,1,	 8,0,1,1},	// MOVE.W Dn,(An)+
	{0,	1,	 5,0,0,1,	 8,0,1,1},	// MOVE.W An,(An)+
	{3,	1,	11,1,0,1,	14,1,1,1},	// MOVE.W (An),(An)+
	{2,	1,	11,1,0,1,	14,1,1,1},	// MOVE.W (An)+,(An)+
	{4,	2,	12,1,0,1,	15,1,1,1},	// MOVE.W -(An),(An)+
	{4,	2,	12,1,0,1,	17,1,2,1},	// MOVE.W (d16,An),(An)+
	{6,	2,	14,1,0,1,	19,1,2,1},	// MOVE.W (d8,An,Xn),(An)+
	{4,	2,	12,1,0,1,	17,1,2,1},	// MOVE.W (xxx).W,(An)+
	{3,	0,	12,1,0,1,	18,1,2,1},	// MOVE.W (xxx).L,(An)+
	{4,	2,	12,1,0,1,	17,1,2,1},	// MOVE.W (d16,PC),(An)+
	{6,	2,	14,1,0,1,	19,1,2,1},	// MOVE.W (d8,PC,Xn),(An)+
	{4,	0,	 8,0,0,1,	13,0,2,1},	// MOVE.W #<data>.W,(An)+
	{0,	2,	 6,0,0,1,	 8,0,1,1},	// MOVE.W Dn,-(An)
	{0,	2,	 6,0,0,1,	 8,0,1,1},	// MOVE.W An,-(An)
	{3,	1,	11,1,0,1,	14,1,1,1},	// MOVE.W (An),-(An)
	{2,	1,	11,1,0,1,	14,1,1,1},	// MOVE.W (An)+,-(An)
	{4,	2,	12,1,0,1,	15,1,1,1},	// MOVE.W -(An),-(An)
	{4,	2,	12,1,0,1,	17,1,2,1},	// MOVE.W (d16,An),-(An)
	{6,	2,	14,1,0,1,	19,1,2,1},	// MOVE.W (d8,An,Xn),-(An)
	{4,	2,	12,1,0,1,	17,1,2,1},	// MOVE.W (xxx).W,-(An)
	{3,	0,	12,1,0,1,	18,1,2,1},	// MOVE.W (xxx).L,-(An)
	{4,	2,	12,1,0,1,	17,1,2,1},	// MOVE.W (d16,PC),-(An)
	{6,	2,	14,1,0,1,	19,1,2,1},	// MOVE.W (d8,PC,Xn),-(An)
	{4,	0,	 8,0,0,1,	13,0,2,1},	// MOVE.W #<data>.W,-(An)
	{2,	0,	 6,0,0,1,	 9,0,1,1},	// MOVE.W Dn,(d16,An)
	{2,	0,	 6,0,0,1,	 9,0,1,1},	// MOVE.W An,(d16,An)
	{3,	1,	11,1,0,1,	14,1,1,1},	// MOVE.W (An),(d16,An)
	{2,	1,	11,1,0,1,	14,1,1,1},	// MOVE.W (An)+,(d16,An)
	{4,	2,	12,1,0,1,	15,1,1,1},	// MOVE.W -(An),(d16,An)
	{4,	2,	12,1,0,1,	17,1,2,1},	// MOVE.W (d16,An),(d16,An)
	{6,	2,	14,1,0,1,	19,1,2,1},	// MOVE.W (d8,An,Xn),(d16,An)
	{4,	2,	12,1,0,1,	17,1,2,1},	// MOVE.W (xxx).W,(d16,An)
	{3,	0,	12,1,0,1,	18,1,2,1},	// MOVE.W (xxx).L,(d16,An)
	{4,	2,	12,1,0,1,	17,1,2,1},	// MOVE.W (d16,PC),(d16,An)
	{6,	2,	14,1,0,1,	19,1,2,1},	// MOVE.W (d8,PC,Xn),(d16,An)
	{4,	0,	 8,0,0,1,	13,0,2,1},	// MOVE.W #<data>.W,(d16,An)
	{4,	0,	 8,0,0,1,	11,0,1,1},	// MOVE.W Dn,(d8,An,Xn)
	{4,	0,	 8,0,0,1,	11,0,1,1},	// MOVE.W An,(d8,An,Xn)
	{5,	1,	13,1,0,1,	16,1,1,1},	// MOVE.W (An),(d8,An,Xn)
	{4,	1,	13,1,0,1,	16,1,1,1},	// MOVE.W (An)+,(d8,An,Xn)
	{6,	2,	14,1,0,1,	17,1,1,1},	// MOVE.W -(An),(d8,An,Xn)
	{6,	2,	14,1,0,1,	19,1,2,1},	// MOVE.W (d16,An),(d8,An,Xn)
	{8,	2,	12,1,0,1,	13,1,2,1},	// MOVE.W (d8,An,Xn),(d8,An,Xn)
	{6,	2,	14,1,0,1,	19,1,2,1},	// MOVE.W (xxx).W,(d8,An,Xn)
	{5,	0,	14,1,0,1,	20,1,2,1},	// MOVE.W (xxx).L,(d8,An,Xn)
	{6,	2,	14,1,0,1,	19,1,2,1},	// MOVE.W (d16,PC),(d8,An,Xn)
	{8,	2,	12,1,0,1,	13,1,2,1},	// MOVE.W (d8,PC,Xn),(d8,An,Xn)
	{6,	0,	10,0,0,1,	15,0,2,1},	// MOVE.W #<data>.W,(d8,An,Xn)
	{4,	0,	 8,0,0,1,	11,0,1,1},	// MOVE.W Dn,(xxx).W
	{4,	0,	 8,0,0,1,	11,0,1,1},	// MOVE.W An,(xxx).W
	{5,	1,	13,1,0,1,	16,1,1,1},	// MOVE.W (An),(xxx).W
	{4,	1,	13,1,0,1,	16,1,1,1},	// MOVE.W (An)+,(xxx).W
	{6,	2,	14,1,0,1,	17,1,1,1},	// MOVE.W -(An),(xxx).W
	{6,	2,	14,1,0,1,	19,1,2,1},	// MOVE.W (d16,An),(xxx).W
	{8,	2,	12,1,0,1,	13,1,2,1},	// MOVE.W (d8,An,Xn),(xxx).W
	{6,	2,	14,1,0,1,	19,1,2,1},	// MOVE.W (xxx).W,(xxx).W
	{5,	0,	14,1,0,1,	20,1,2,1},	// MOVE.W (xxx).L,(xxx).W
	{6,	2,	14,1,0,1,	19,1,2,1},	// MOVE.W (d16,PC),(xxx).W
	{8,	2,	12,1,0,1,	13,1,2,1},	// MOVE.W (d8,PC,Xn),(xxx).W
	{6,	0,	10,0,0,1,	15,0,2,1},	// MOVE.W #<data>.W,(xxx).W
	{0,	0,	 8,0,0,1,	13,0,2,1},	// MOVE.W Dn,(xxx).L
	{0,	0,	 8,0,0,1,	13,0,2,1},	// MOVE.W An,(xxx).L
	{1,	1,	13,1,0,1,	18,1,2,1},	// MOVE.W (An),(xxx).L
	{0,	1,	13,1,0,1,	18,1,2,1},	// MOVE.W (An)+,(xxx).L
	{2,	2,	14,1,0,1,	19,1,2,1},	// MOVE.W -(An),(xxx).L
	{2,	2,	14,1,0,1,	21,1,3,1},	// MOVE.W (d16,An),(xxx).L
	{4,	2,	16,1,0,1,	23,1,3,1},	// MOVE.W (d8,An,Xn),(xxx).L
	{2,	2,	14,1,0,1,	21,1,3,1},	// MOVE.W (xxx).W,(xxx).L
	{1,	0,	14,1,0,1,	22,1,3,1},	// MOVE.W (xxx).L,(xxx).L
	{2,	2,	14,1,0,1,	21,1,3,1},	// MOVE.W (d16,PC),(xxx).L
	{4,	2,	16,1,0,1,	23,1,3,1},	// MOVE.W (d8,PC,Xn),(xxx).L
	{2,	0,	10,0,0,1,	17,0,3,1},	// MOVE.W #<data>.W,(xxx).L
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// NEGX.B Dn
	{1,	2,	10,1,0,1,	13,1,1,1},	// NEGX.B (An)
	{0,	2,	10,1,0,1,	13,1,1,1},	// NEGX.B (An)+
	{2,	3,	11,1,0,1,	14,1,1,1},	// NEGX.B -(An)
	{2,	3,	11,1,0,1,	16,1,2,1},	// NEGX.B (d16,An)
	{4,	3,	13,1,0,1,	18,1,2,1},	// NEGX.B (d8,An,Xn)
	{2,	3,	11,1,0,1,	16,1,2,1},	// NEGX.B (xxx).W
	{1,	1,	11,1,0,1,	17,1,2,1},	// NEGX.B (xxx).L
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// NEGX.W Dn
	{1,	2,	10,1,0,1,	13,1,1,1},	// NEGX.W (An)
	{0,	2,	10,1,0,1,	13,1,1,1},	// NEGX.W (An)+
	{2,	3,	11,1,0,1,	14,1,1,1},	// NEGX.W -(An)
	{2,	3,	11,1,0,1,	16,1,2,1},	// NEGX.W (d16,An)
	{4,	3,	13,1,0,1,	18,1,2,1},	// NEGX.W (d8,An,Xn)
	{2,	3,	11,1,0,1,	16,1,2,1},	// NEGX.W (xxx).W
	{1,	1,	11,1,0,1,	17,1,2,1},	// NEGX.W (xxx).L
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// NEGX.L Dn
	{1,	2,	18,1,0,1,	21,1,1,1},	// NEGX.L (An)
	{0,	2,	18,1,0,1,	21,1,1,1},	// NEGX.L (An)+
	{2,	3,	19,1,0,1,	22,1,1,1},	// NEGX.L -(An)
	{2,	3,	19,1,0,1,	24,1,2,1},	// NEGX.L (d16,An)
	{4,	3,	21,1,0,1,	26,1,2,1},	// NEGX.L (d8,An,Xn)
	{2,	3,	19,1,0,1,	24,1,2,1},	// NEGX.L (xxx).W
	{1,	1,	19,1,0,1,	25,1,2,1},	// NEGX.L (xxx).L
	{2,	0,	 4,0,0,0,	 6,0,1,0},	// MOVE.W SR,Dn
	{3,	1,	11,1,0,1,	14,1,1,1},	// MOVE.W SR,(An)
	{2,	1,	11,1,0,1,	14,1,1,1},	// MOVE.W SR,(An)+
	{4,	2,	12,1,0,1,	15,1,1,1},	// MOVE.W SR,-(An)
	{4,	2,	12,1,0,1,	17,1,2,1},	// MOVE.W SR,(d16,An)
	{6,	2,	14,1,0,1,	19,1,2,1},	// MOVE.W SR,(d8,An,Xn)
	{4,	2,	12,1,0,1,	17,1,2,1},	// MOVE.W SR,(xxx).W
	{3,	0,	12,1,0,1,	18,1,2,1},	// MOVE.W SR,(xxx).L
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK.L Dn,Dn		(See CHK table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK.L (An),Dn	(See CHK table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK.L (An)+,Dn	(See CHK table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK.L -(An),Dn	(See CHK table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK.L (d16,An),Dn	(See CHK table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK.L (d8,An,Xn),Dn	(See CHK table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK.L (xxx).W,Dn	(See CHK table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK.L (xxx).L,Dn	(See CHK table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK.L (d16,PC),Dn	(See CHK table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK.L (d8,PC,Xn),Dn	(See CHK table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK.L #<data>.L,Dn	(See CHK table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK.W Dn,Dn		(See CHK table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK.W (An),Dn	(See CHK table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK.W (An)+,Dn	(See CHK table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK.W -(An),Dn	(See CHK table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK.W (d16,An),Dn	(See CHK table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK.W (d8,An,Xn),Dn	(See CHK table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK.W (xxx).W,Dn	(See CHK table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK.W (xxx).L,Dn	(See CHK table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK.W (d16,PC),Dn	(See CHK table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK.W (d8,PC,Xn),Dn	(See CHK table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// CHK.W #<data>.W,Dn	(See CHK table below)
	{6,	0,	 4,0,0,0,	 6,0,1,0},	// LEA.L (An),An
	{6,	0,	 4,0,0,0,	 8,0,2,0},	// LEA.L (d16,An),An
	{8,	0,	 6,0,0,0,	10,0,2,0},	// LEA.L (d8,An,Xn),An
	{6,	0,	 4,0,0,0,	 8,0,2,0},	// LEA.L (xxx).W,An
	{8,	0,	 6,0,0,0,	10,0,2,0},	// LEA.L (xxx).L,An
	{6,	0,	 4,0,0,0,	 8,0,2,0},	// LEA.L (d16,PC),An
	{8,	0,	 6,0,0,0,	10,0,2,0},	// LEA.L (d8,PC,Xn),An
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// CLR.B Dn
	{2,	1,	 7,0,0,1,	10,0,1,1},	// CLR.B (An)
	{0,	1,	 7,0,0,1,	10,0,1,1},	// CLR.B (An)+
	{2,	1,	 7,0,0,1,	10,0,1,1},	// CLR.B -(An)
	{2,	1,	 7,0,0,1,	12,0,2,1},	// CLR.B (d16,An)
	{4,	1,	 9,0,0,1,	14,0,2,1},	// CLR.B (d8,An,Xn)
	{2,	1,	 7,0,0,1,	12,0,2,1},	// CLR.B (xxx).W
	{4,	1,	 9,0,0,1,	14,0,2,1},	// CLR.B (xxx).L
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// CLR.W Dn
	{2,	1,	 7,0,0,1,	10,0,1,1},	// CLR.W (An)
	{0,	1,	 7,0,0,1,	10,0,1,1},	// CLR.W (An)+
	{2,	1,	 7,0,0,1,	10,0,1,1},	// CLR.W -(An)
	{2,	1,	 7,0,0,1,	12,0,2,1},	// CLR.W (d16,An)
	{4,	1,	 9,0,0,1,	14,0,2,1},	// CLR.W (d8,An,Xn)
	{2,	1,	 7,0,0,1,	12,0,2,1},	// CLR.W (xxx).W
	{4,	1,	 9,0,0,1,	14,0,2,1},	// CLR.W (xxx).L
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// CLR.L Dn
	{2,	1,	11,0,0,1,	14,0,1,1},	// CLR.L (An)
	{0,	1,	11,0,0,1,	14,0,1,1},	// CLR.L (An)+
	{2,	1,	11,0,0,1,	14,0,1,1},	// CLR.L -(An)
	{2,	1,	11,0,0,1,	16,0,2,1},	// CLR.L (d16,An)
	{4,	1,	13,0,0,1,	18,0,2,1},	// CLR.L (d8,An,Xn)
	{2,	1,	11,0,0,1,	16,0,2,1},	// CLR.L (xxx).W
	{4,	1,	13,0,0,1,	18,0,2,1},	// CLR.L (xxx).L
	{2,	0,	 4,0,0,0,	 6,0,1,0},	// MOVE.B SR,Dn
	{3,	1,	11,1,0,1,	14,1,1,1},	// MOVE.B SR,(An)
	{2,	1,	11,1,0,1,	14,1,1,1},	// MOVE.B SR,(An)+
	{4,	2,	12,1,0,1,	15,1,1,1},	// MOVE.B SR,-(An)
	{4,	2,	12,1,0,1,	17,1,2,1},	// MOVE.B SR,(d16,An)
	{6,	2,	14,1,0,1,	19,1,2,1},	// MOVE.B SR,(d8,An,Xn)
	{4,	2,	12,1,0,1,	17,1,2,1},	// MOVE.B SR,(xxx).W
	{3,	0,	12,1,0,1,	18,1,2,1},	// MOVE.B SR,(xxx).L
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// NEG.B Dn
	{1,	2,	10,1,0,1,	13,1,1,1},	// NEG.B (An)
	{0,	2,	10,1,0,1,	13,1,1,1},	// NEG.B (An)+
	{2,	3,	11,1,0,1,	14,1,1,1},	// NEG.B -(An)
	{2,	3,	11,1,0,1,	16,1,2,1},	// NEG.B (d16,An)
	{4,	3,	13,1,0,1,	18,1,2,1},	// NEG.B (d8,An,Xn)
	{2,	3,	11,1,0,1,	16,1,2,1},	// NEG.B (xxx).W
	{1,	1,	11,1,0,1,	17,1,2,1},	// NEG.B (xxx).L
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// NEG.W Dn
	{1,	2,	10,1,0,1,	13,1,1,1},	// NEG.W (An)
	{0,	2,	10,1,0,1,	13,1,1,1},	// NEG.W (An)+
	{2,	3,	11,1,0,1,	14,1,1,1},	// NEG.W -(An)
	{2,	3,	11,1,0,1,	16,1,2,1},	// NEG.W (d16,An)
	{4,	3,	13,1,0,1,	18,1,2,1},	// NEG.W (d8,An,Xn)
	{2,	3,	11,1,0,1,	16,1,2,1},	// NEG.W (xxx).W
	{1,	1,	11,1,0,1,	17,1,2,1},	// NEG.W (xxx).L
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// NEG.L Dn
	{1,	2,	18,1,0,1,	21,1,1,1},	// NEG.L (An)
	{0,	2,	18,1,0,1,	21,1,1,1},	// NEG.L (An)+
	{2,	3,	19,1,0,1,	22,1,1,1},	// NEG.L -(An)
	{2,	3,	19,1,0,1,	24,1,2,1},	// NEG.L (d16,An)
	{4,	3,	21,1,0,1,	26,1,2,1},	// NEG.L (d8,An,Xn)
	{2,	3,	19,1,0,1,	24,1,2,1},	// NEG.L (xxx).W
	{1,	1,	19,1,0,1,	25,1,2,1},	// NEG.L (xxx).L
	{0,	0,	 8,0,0,0,	14,0,2,0},	// MOVE.B Dn,SR
	{1,	1,	13,1,0,0,	19,1,2,0},	// MOVE.B (An),SR
	{0,	1,	13,1,0,0,	19,1,2,0},	// MOVE.B (An)+,SR
	{2,	2,	14,1,0,0,	20,1,2,0},	// MOVE.B -(An),SR
	{2,	2,	14,1,0,0,	22,1,3,0},	// MOVE.B (d16,An),SR
	{4,	2,	16,1,0,0,	24,1,3,0},	// MOVE.B (d8,An,Xn),SR
	{2,	2,	14,1,0,0,	22,1,3,0},	// MOVE.B (xxx).W,SR
	{1,	0,	14,1,0,0,	23,1,3,0},	// MOVE.B (xxx).L,SR
	{2,	2,	14,1,0,0,	22,1,3,0},	// MOVE.B (d16,PC),SR
	{4,	2,	16,1,0,0,	24,1,3,0},	// MOVE.B (d8,PC,Xn),SR
	{2,	0,	10,0,0,0,	18,0,3,0},	// MOVE.B #<data>.B,SR
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// NOT.B Dn
	{1,	2,	10,1,0,1,	13,1,1,1},	// NOT.B (An)
	{0,	2,	10,1,0,1,	13,1,1,1},	// NOT.B (An)+
	{2,	3,	11,1,0,1,	14,1,1,1},	// NOT.B -(An)
	{2,	3,	11,1,0,1,	16,1,2,1},	// NOT.B (d16,An)
	{4,	3,	13,1,0,1,	18,1,2,1},	// NOT.B (d8,An,Xn)
	{2,	3,	11,1,0,1,	16,1,2,1},	// NOT.B (xxx).W
	{1,	1,	11,1,0,1,	17,1,2,1},	// NOT.B (xxx).L
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// NOT.W Dn
	{1,	2,	10,1,0,1,	13,1,1,1},	// NOT.W (An)
	{0,	2,	10,1,0,1,	13,1,1,1},	// NOT.W (An)+
	{2,	3,	11,1,0,1,	14,1,1,1},	// NOT.W -(An)
	{2,	3,	11,1,0,1,	16,1,2,1},	// NOT.W (d16,An)
	{4,	3,	13,1,0,1,	18,1,2,1},	// NOT.W (d8,An,Xn)
	{2,	3,	11,1,0,1,	16,1,2,1},	// NOT.W (xxx).W
	{1,	1,	11,1,0,1,	17,1,2,1},	// NOT.W (xxx).L
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// NOT.L Dn
	{1,	2,	18,1,0,1,	21,1,1,1},	// NOT.L (An)
	{0,	2,	18,1,0,1,	21,1,1,1},	// NOT.L (An)+
	{2,	3,	19,1,0,1,	22,1,1,1},	// NOT.L -(An)
	{2,	3,	19,1,0,1,	24,1,2,1},	// NOT.L (d16,An)
	{4,	3,	21,1,0,1,	26,1,2,1},	// NOT.L (d8,An,Xn)
	{2,	3,	19,1,0,1,	24,1,2,1},	// NOT.L (xxx).W
	{1,	1,	19,1,0,1,	25,1,2,1},	// NOT.L (xxx).L
	{0,	0,	 8,0,0,0,	14,0,2,0},	// MOVE.W Dn,SR
	{1,	1,	13,1,0,0,	19,1,2,0},	// MOVE.W (An),SR
	{0,	1,	13,1,0,0,	19,1,2,0},	// MOVE.W (An)+,SR
	{2,	2,	14,1,0,0,	20,1,2,0},	// MOVE.W -(An),SR
	{2,	2,	14,1,0,0,	22,1,3,0},	// MOVE.W (d16,An),SR
	{4,	2,	16,1,0,0,	24,1,3,0},	// MOVE.W (d8,An,Xn),SR
	{2,	2,	14,1,0,0,	22,1,3,0},	// MOVE.W (xxx).W,SR
	{1,	0,	14,1,0,0,	23,1,3,0},	// MOVE.W (xxx).L,SR
	{2,	2,	14,1,0,0,	22,1,3,0},	// MOVE.W (d16,PC),SR
	{4,	2,	16,1,0,0,	24,1,3,0},	// MOVE.W (d8,PC,Xn),SR
	{2,	0,	10,0,0,0,	18,0,3,0},	// MOVE.W #<data>.W,SR
	{0,	0,	 6,0,0,0,	 8,0,1,0},	// NBCD.B Dn
	{2,	0,	12,0,0,1,	17,0,2,1},	// LINK.L An,#<data>.L
	{},	// NBCD.B (An)
	{},	// NBCD.B (An)+
	{},	// NBCD.B -(An)
	{},	// NBCD.B (d16,An)
	{},	// NBCD.B (d8,An,Xn)
	{},	// NBCD.B (xxx).W
	{},	// NBCD.B (xxx).L
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// SWAP.W Dn
	{1,	0,	15,1,0,0,	15,1,0,0},	// BKPTQ.L #<data>
	{2,	2,	12,0,0,1,	14,0,1,1},	// PEA.L (An)
	{2,	2,	12,0,0,1,	16,0,2,1},	// PEA.L (d16,An)
	{4,	2,	14,0,0,1,	18,0,2,1},	// PEA.L (d8,An,Xn)
	{2,	2,	12,0,0,1,	16,0,2,1},	// PEA.L (xxx).W
	{4,	2,	14,0,0,1,	18,0,2,1},	// PEA.L (xxx).L
	{2,	2,	12,0,0,1,	16,0,2,1},	// PEA.L (d16,PC)
	{4,	2,	14,0,0,1,	18,0,2,1},	// PEA.L (d8,PC,Xn)
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// EXT.W Dn
	{},	// MVMLE.W #<data>.W,(An)
	{},	// MVMLE.W #<data>.W,-(An)
	{},	// MVMLE.W #<data>.W,(d16,An)
	{},	// MVMLE.W #<data>.W,(d8,An,Xn)
	{},	// MVMLE.W #<data>.W,(xxx).W
	{},	// MVMLE.W #<data>.W,(xxx).L
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// EXT.L Dn
	{},	// MVMLE.L #<data>.W,(An)
	{},	// MVMLE.L #<data>.W,-(An)
	{},	// MVMLE.L #<data>.W,(d16,An)
	{},	// MVMLE.L #<data>.W,(d8,An,Xn)
	{},	// MVMLE.L #<data>.W,(xxx).W
	{},	// MVMLE.L #<data>.W,(xxx).L
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// EXT.B Dn
	{0,	0,	 2,0,0,0,	 4,0,1,0},	// TST.B Dn
	{1,	1,	 7,1,0,0,	 9,1,1,0},	// TST.B (An)
	{0,	1,	 7,1,0,0,	 9,1,1,0},	// TST.B (An)+
	{2,	2,	 8,1,0,0,	10,1,1,0},	// TST.B -(An)
	{2,	2,	 8,1,0,0,	12,1,2,0},	// TST.B (d16,An)
	{4,	2,	10,1,0,0,	14,1,2,0},	// TST.B (d8,An,Xn)
	{2,	2,	 8,1,0,0,	12,1,2,0},	// TST.B (xxx).W
	{1,	0,	 8,1,0,0,	13,1,2,0},	// TST.B (xxx).L
	{2,	2,	 8,1,0,0,	12,1,2,0},	// TST.B (d16,PC)
	{4,	2,	10,1,0,0,	14,1,2,0},	// TST.B (d8,PC,Xn)
	{2,	0,	 4,0,0,0,	 8,0,2,0},	// TST.B #<data>.B
	{0,	0,	 2,0,0,0,	 4,0,1,0},	// TST.W Dn
	{0,	0,	 2,0,0,0,	 4,0,1,0},	// TST.W An
	{1,	1,	 7,1,0,0,	 9,1,1,0},	// TST.W (An)
	{0,	1,	 7,1,0,0,	 9,1,1,0},	// TST.W (An)+
	{2,	2,	 8,1,0,0,	10,1,1,0},	// TST.W -(An)
	{2,	2,	 8,1,0,0,	12,1,2,0},	// TST.W (d16,An)
	{4,	2,	10,1,0,0,	14,1,2,0},	// TST.W (d8,An,Xn)
	{2,	2,	 8,1,0,0,	12,1,2,0},	// TST.W (xxx).W
	{1,	0,	 8,1,0,0,	13,1,2,0},	// TST.W (xxx).L
	{2,	2,	 8,1,0,0,	12,1,2,0},	// TST.W (d16,PC)
	{4,	2,	10,1,0,0,	14,1,2,0},	// TST.W (d8,PC,Xn)
	{2,	0,	 4,0,0,0,	 8,0,2,0},	// TST.W #<data>.W
	{0,	0,	 2,0,0,0,	 4,0,1,0},	// TST.L Dn
	{0,	0,	 2,0,0,0,	 4,0,1,0},	// TST.L An
	{1,	1,	11,1,0,0,	13,1,1,0},	// TST.L (An)
	{0,	1,	11,1,0,0,	13,1,1,0},	// TST.L (An)+
	{2,	2,	12,1,0,0,	14,1,1,0},	// TST.L -(An)
	{2,	2,	12,1,0,0,	16,1,2,0},	// TST.L (d16,An)
	{4,	2,	14,1,0,0,	18,1,2,0},	// TST.L (d8,An,Xn)
	{2,	2,	12,1,0,0,	16,1,2,0},	// TST.L (xxx).W
	{1,	0,	12,1,0,0,	17,1,2,0},	// TST.L (xxx).L
	{2,	2,	12,1,0,0,	16,1,2,0},	// TST.L (d16,PC)
	{4,	2,	14,1,0,0,	18,1,2,0},	// TST.L (d8,PC,Xn)
	{4,	0,	 6,0,0,0,	10,0,2,0},	// TST.L #<data>.L
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// TAS.B Dn
	{8,	0,	18,1,0,1,	20,1,1,1},	// TAS.B (An)
	{3,	0,	18,1,0,1,	20,1,1,1},	// TAS.B (An)+
	{8,	0,	18,1,0,1,	20,1,1,1},	// TAS.B -(An)
	{8,	0,	18,1,0,1,	22,1,2,1},	// TAS.B (d16,An)
	{10,	0,	20,1,0,1,	24,1,2,1},	// TAS.B (d8,An,Xn)
	{8,	0,	18,1,0,1,	22,1,2,1},	// TAS.B (xxx).W
	{10,	0,	20,1,0,1,	24,1,2,1},	// TAS.B (xxx).L
	{8,	0,	48,0,0,0,	52,0,2,0},	// MULL.L #<data>.W,Dn			(Max Value)
	{3,	0,	54,1,0,0,	59,1,2,0},	// MULL.L #<data>.W,(An)		(Max Value)
	{6,	1,	57,1,0,0,	61,1,2,0},	// MULL.L #<data>.W,(An)+		(Max Value)
	{4,	0,	54,1,0,0,	59,1,2,0},	// MULL.L #<data>.W,-(An)		(Max Value)
	{6,	0,	56,1,0,0,	64,1,3,0},	// MULL.L #<data>.W,(d16,An)		(Max Value)
	{10,	2,	60,1,0,0,	66,1,3,0},	// MULL.L #<data>.W,(d8,An,Xn)		(Max Value)
	{8,	2,	58,1,0,0,	64,1,3,0},	// MULL.L #<data>.W,(xxx).W		(Max Value)
	{7,	0,	58,1,0,0,	65,1,3,0},	// MULL.L #<data>.W,(xxx).L		(Max Value)
	{6,	0,	56,1,0,0,	64,1,3,0},	// MULL.L #<data>.W,(d16,PC)		(Max Value)
	{10,	2,	60,1,0,0,	66,1,3,0},	// MULL.L #<data>.W,(d8,PC,Xn)		(Max Value)
	{10,	0,	50,0,0,0,	56,0,3,0},	// MULL.L #<data>.W,#<data>.L		(Max Value)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// DIVL.L #<data>.W,Dn		(See DIVL table below)(Max Value)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// DIVL.L #<data>.W,(An)		(See DIVL table below)(Max Value)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// DIVL.L #<data>.W,(An)+		(See DIVL table below)(Max Value)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// DIVL.L #<data>.W,-(An)		(See DIVL table below)(Max Value)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// DIVL.L #<data>.W,(d16,An)		(See DIVL table below)(Max Value)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// DIVL.L #<data>.W,(d8,An,Xn)		(See DIVL table below)(Max Value)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// DIVL.L #<data>.W,(xxx).W		(See DIVL table below)(Max Value)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// DIVL.L #<data>.W,(xxx).L		(See DIVL table below)(Max Value)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// DIVL.L #<data>.W,(d16,PC)		(See DIVL table below)(Max Value)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// DIVL.L #<data>.W,(d8,PC,Xn)		(See DIVL table below)(Max Value)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// DIVL.L #<data>.W,#<data>.L		(See DIVL table below)(Max Value)
	{},	// MVMEL.W #<data>.W,(An)
	{},	// MVMEL.W #<data>.W,(An)+
	{},	// MVMEL.W #<data>.W,(d16,An)
	{},	// MVMEL.W #<data>.W,(d8,An,Xn)
	{},	// MVMEL.W #<data>.W,(xxx).W
	{},	// MVMEL.W #<data>.W,(xxx).L
	{},	// MVMEL.W #<data>.W,(d16,PC)
	{},	// MVMEL.W #<data>.W,(d8,PC,Xn)
	{},	// MVMEL.L #<data>.W,(An)
	{},	// MVMEL.L #<data>.W,(An)+
	{},	// MVMEL.L #<data>.W,(d16,An)
	{},	// MVMEL.L #<data>.W,(d8,An,Xn)
	{},	// MVMEL.L #<data>.W,(xxx).W
	{},	// MVMEL.L #<data>.W,(xxx).L
	{},	// MVMEL.L #<data>.W,(d16,PC)
	{},	// MVMEL.L #<data>.W,(d8,PC,Xn)
	{0,	0,	28,1,0,4,	34,1,2,4},	// TRAPQ.L #<data>
	{0,	0,	 6,0,0,1,	 9,0,1,1},	// LINK.W An,#<data>.W
	{0,	0,	 7,1,0,0,	 9,1,1,0},	// UNLK.L An
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// MOVE An,USP.L
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// MOVE USP.L,An
	{0,	0,	518,0,0,0,	520,0,1,0}, 	// RESET.L 
	{0,	0,	 2,0,0,0,	 4,0,1,0},	// NOP.L 
	{0,	0,	 8,0,0,0,	12,0,2,0},	// STOP.L #<data>.W
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// RTE.L	(See RTE table below) 
	{2,	0,	12,1,0,0,	18,1,2,0},	// RTD.L #<data>.W
	{1,	0,	11,1,0,0,	17,1,2,0},	// RTS.L 
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPV.L		(See TRAPV table below)
	{1,	0,	16,2,0,0,	22,2,2,0},	// RTR.L 
	{6,	0,	 6,0,0,0,	 8,0,1,0},	// MOVEC2.L #<data>.W
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// MOVE2C.L #<data>.W		(See MOVEC table below)
	{2,	0,	12,0,0,1,	19,0,2,1},	// JSR.L (An)
	{4,	0,	14,0,0,1,	21,0,2,1},	// JSR.L (d16,An)
	{6,	0,	16,0,0,1,	23,0,2,1},	// JSR.L (d8,An,Xn)
	{2,	0,	12,0,0,1,	19,0,2,1},	// JSR.L (xxx).W
	{2,	0,	12,0,0,1,	19,0,2,1},	// JSR.L (xxx).L
	{4,	0,	14,0,0,1,	21,0,2,1},	// JSR.L (d16,PC)
	{6,	0,	16,0,0,1,	23,0,2,1},	// JSR.L (d8,PC,Xn)
	{10,	0,	 6,0,0,0,	12,0,2,0},	// JMP.L (An)
	{12,	0,	 8,0,0,0,	14,0,2,0},	// JMP.L (d16,An)
	{14,	0,	10,0,0,0,	16,0,2,0},	// JMP.L (d8,An,Xn)
	{10,	0,	 6,0,0,0,	12,0,2,0},	// JMP.L (xxx).W
	{10,	0,	 6,0,0,0,	12,0,2,0},	// JMP.L (xxx).L
	{12,	0,	 8,0,0,0,	14,0,2,0},	// JMP.L (d16,PC)
	{14,	0,	10,0,0,0,	16,0,2,0},	// JMP.L (d8,PC,Xn)
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// ADDQ.B #<data>,Dn
	{1,	2,	10,1,0,1,	13,1,1,1},	// ADDQ.B #<data>,(An)
	{0,	2,	10,1,0,1,	13,1,1,1},	// ADDQ.B #<data>,(An)+
	{2,	3,	11,1,0,1,	14,1,1,1},	// ADDQ.B #<data>,-(An)
	{2,	3,	11,1,0,1,	16,1,2,1},	// ADDQ.B #<data>,(d16,An)
	{4,	3,	13,1,0,1,	18,1,2,1},	// ADDQ.B #<data>,(d8,An,Xn)
	{2,	3,	11,1,0,1,	16,1,2,1},	// ADDQ.B #<data>,(xxx).W
	{1,	1,	11,1,0,1,	17,1,2,1},	// ADDQ.B #<data>,(xxx).L
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// ADDQ.W #<data>,Dn
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// ADDAQ.W #<data>,An
	{1,	2,	10,1,0,1,	13,1,1,1},	// ADDQ.W #<data>,(An)
	{0,	2,	10,1,0,1,	13,1,1,1},	// ADDQ.W #<data>,(An)+
	{2,	3,	11,1,0,1,	14,1,1,1},	// ADDQ.W #<data>,-(An)
	{2,	3,	11,1,0,1,	16,1,2,1},	// ADDQ.W #<data>,(d16,An)
	{4,	3,	13,1,0,1,	18,1,2,1},	// ADDQ.W #<data>,(d8,An,Xn)
	{2,	3,	11,1,0,1,	16,1,2,1},	// ADDQ.W #<data>,(xxx).W
	{1,	1,	11,1,0,1,	17,1,2,1},	// ADDQ.W #<data>,(xxx).L
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// ADDQ.L #<data>,Dn
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// ADDAQ.L #<data>,An
	{1,	2,	18,1,0,1,	21,1,1,1},	// ADDQ.L #<data>,(An)
	{0,	2,	18,1,0,1,	21,1,1,1},	// ADDQ.L #<data>,(An)+
	{2,	3,	19,1,0,1,	22,1,1,1},	// ADDQ.L #<data>,-(An)
	{2,	3,	19,1,0,1,	24,1,2,1},	// ADDQ.L #<data>,(d16,An)
	{4,	3,	21,1,0,1,	26,1,2,1},	// ADDQ.L #<data>,(d8,An,Xn)
	{2,	3,	19,1,0,1,	24,1,2,1},	// ADDQ.L #<data>,(xxx).W
	{1,	1,	19,1,0,1,	25,1,2,1},	// ADDQ.L #<data>,(xxx).L
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// Scc.B Dn
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// DBcc.W Dn,#<data>.W		(See DBcc table below)
	{2,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B (An)
	{0,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B (An)+
	{2,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B -(An)
	{2,	1,	 9,0,0,1,	13,0,2,1},	// Scc.B (d16,An)
	{4,	1,	11,0,0,1,	15,0,2,1},	// Scc.B (d8,An,Xn)
	{2,	1,	 9,0,0,1,	13,0,2,1},	// Scc.B (xxx).W
	{4,	1,	11,0,0,1,	15,0,2,1},	// Scc.B (xxx).L
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L #<data>.W		(See TRAPCC.W table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L #<data>.L		(See TRAPCC.L table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L 		(See TRAPCC table below)
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// SUBQ.B #<data>,Dn
	{1,	2,	10,1,0,1,	13,1,1,1},	// SUBQ.B #<data>,(An)
	{0,	2,	10,1,0,1,	13,1,1,1},	// SUBQ.B #<data>,(An)+
	{2,	3,	11,1,0,1,	14,1,1,1},	// SUBQ.B #<data>,-(An)
	{2,	3,	11,1,0,1,	16,1,2,1},	// SUBQ.B #<data>,(d16,An)
	{4,	3,	13,1,0,1,	18,1,2,1},	// SUBQ.B #<data>,(d8,An,Xn)
	{2,	3,	11,1,0,1,	16,1,2,1},	// SUBQ.B #<data>,(xxx).W
	{1,	1,	11,1,0,1,	17,1,2,1},	// SUBQ.B #<data>,(xxx).L
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// SUBQ.W #<data>,Dn
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// SUBAQ.W #<data>,An
	{1,	2,	10,1,0,1,	13,1,1,1},	// SUBQ.W #<data>,(An)
	{0,	2,	10,1,0,1,	13,1,1,1},	// SUBQ.W #<data>,(An)+
	{2,	3,	11,1,0,1,	14,1,1,1},	// SUBQ.W #<data>,-(An)
	{2,	3,	11,1,0,1,	16,1,2,1},	// SUBQ.W #<data>,(d16,An)
	{4,	3,	13,1,0,1,	18,1,2,1},	// SUBQ.W #<data>,(d8,An,Xn)
	{2,	3,	11,1,0,1,	16,1,2,1},	// SUBQ.W #<data>,(xxx).W
	{1,	1,	11,1,0,1,	17,1,2,1},	// SUBQ.W #<data>,(xxx).L
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// SUBQ.L #<data>,Dn
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// SUBAQ.L #<data>,An
	{1,	2,	18,1,0,1,	21,1,1,1},	// SUBQ.L #<data>,(An)
	{0,	2,	18,1,0,1,	21,1,1,1},	// SUBQ.L #<data>,(An)+
	{2,	3,	19,1,0,1,	22,1,1,1},	// SUBQ.L #<data>,-(An)
	{2,	3,	19,1,0,1,	24,1,2,1},	// SUBQ.L #<data>,(d16,An)
	{4,	3,	21,1,0,1,	26,1,2,1},	// SUBQ.L #<data>,(d8,An,Xn)
	{2,	3,	19,1,0,1,	24,1,2,1},	// SUBQ.L #<data>,(xxx).W
	{1,	1,	19,1,0,1,	25,1,2,1},	// SUBQ.L #<data>,(xxx).L
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// Scc.B Dn
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// DBcc.W Dn,#<data>.W		(See DBcc table below)
	{2,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B (An)
	{0,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B (An)+
	{2,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B -(An)
	{2,	1,	 9,0,0,1,	13,0,2,1},	// Scc.B (d16,An)
	{4,	1,	11,0,0,1,	15,0,2,1},	// Scc.B (d8,An,Xn)
	{2,	1,	 9,0,0,1,	13,0,2,1},	// Scc.B (xxx).W
	{4,	1,	11,0,0,1,	15,0,2,1},	// Scc.B (xxx).L
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L #<data>.W		(See TRAPCC.W table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L #<data>.L		(See TRAPCC.L table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L 		(See TRAPCC table below)
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// Scc.B Dn
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// DBcc.W Dn,#<data>.W		(See DBcc table below)
	{2,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B (An)
	{0,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B (An)+
	{2,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B -(An)
	{2,	1,	 9,0,0,1,	13,0,2,1},	// Scc.B (d16,An)
	{4,	1,	11,0,0,1,	15,0,2,1},	// Scc.B (d8,An,Xn)
	{2,	1,	 9,0,0,1,	13,0,2,1},	// Scc.B (xxx).W
	{4,	1,	11,0,0,1,	15,0,2,1},	// Scc.B (xxx).L
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L #<data>.W		(See TRAPCC.W table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L #<data>.L		(See TRAPCC.L table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L 		(See TRAPCC table below)
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// Scc.B Dn
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// DBcc.W Dn,#<data>.W		(See DBcc table below)
	{2,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B (An)
	{0,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B (An)+
	{2,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B -(An)
	{2,	1,	 9,0,0,1,	13,0,2,1},	// Scc.B (d16,An)
	{4,	1,	11,0,0,1,	15,0,2,1},	// Scc.B (d8,An,Xn)
	{2,	1,	 9,0,0,1,	13,0,2,1},	// Scc.B (xxx).W
	{4,	1,	11,0,0,1,	15,0,2,1},	// Scc.B (xxx).L
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L #<data>.W		(See TRAPCC.W table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L #<data>.L		(See TRAPCC.L table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L 		(See TRAPCC table below)
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// Scc.B Dn
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// DBcc.W Dn,#<data>.W		(See DBcc table below)
	{2,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B (An)
	{0,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B (An)+
	{2,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B -(An)
	{2,	1,	 9,0,0,1,	13,0,2,1},	// Scc.B (d16,An)
	{4,	1,	11,0,0,1,	15,0,2,1},	// Scc.B (d8,An,Xn)
	{2,	1,	 9,0,0,1,	13,0,2,1},	// Scc.B (xxx).W
	{4,	1,	11,0,0,1,	15,0,2,1},	// Scc.B (xxx).L
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L #<data>.W		(See TRAPCC.W table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L #<data>.L		(See TRAPCC.L table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L 		(See TRAPCC table below)
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// Scc.B Dn
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// DBcc.W Dn,#<data>.W		(See DBcc table below)
	{2,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B (An)
	{0,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B (An)+
	{2,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B -(An)
	{2,	1,	 9,0,0,1,	13,0,2,1},	// Scc.B (d16,An)
	{4,	1,	11,0,0,1,	15,0,2,1},	// Scc.B (d8,An,Xn)
	{2,	1,	 9,0,0,1,	13,0,2,1},	// Scc.B (xxx).W
	{4,	1,	11,0,0,1,	15,0,2,1},	// Scc.B (xxx).L
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L #<data>.W		(See TRAPCC.W table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L #<data>.L		(See TRAPCC.L table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L 		(See TRAPCC table below)
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// Scc.B Dn
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// DBcc.W Dn,#<data>.W		(See DBcc table below)
	{2,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B (An)
	{0,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B (An)+
	{2,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B -(An)
	{2,	1,	 9,0,0,1,	13,0,2,1},	// Scc.B (d16,An)
	{4,	1,	11,0,0,1,	15,0,2,1},	// Scc.B (d8,An,Xn)
	{2,	1,	 9,0,0,1,	13,0,2,1},	// Scc.B (xxx).W
	{4,	1,	11,0,0,1,	15,0,2,1},	// Scc.B (xxx).L
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L #<data>.W		(See TRAPCC.W table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L #<data>.L		(See TRAPCC.L table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L 		(See TRAPCC table below)
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// Scc.B Dn
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// DBcc.W Dn,#<data>.W		(See DBcc table below)
	{2,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B (An)
	{0,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B (An)+
	{2,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B -(An)
	{2,	1,	 9,0,0,1,	13,0,2,1},	// Scc.B (d16,An)
	{4,	1,	11,0,0,1,	15,0,2,1},	// Scc.B (d8,An,Xn)
	{2,	1,	 9,0,0,1,	13,0,2,1},	// Scc.B (xxx).W
	{4,	1,	11,0,0,1,	15,0,2,1},	// Scc.B (xxx).L
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L #<data>.W		(See TRAPCC.W table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L #<data>.L		(See TRAPCC.L table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L 		(See TRAPCC table below)
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// Scc.B Dn
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// DBcc.W Dn,#<data>.W		(See DBcc table below)
	{2,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B (An)
	{0,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B (An)+
	{2,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B -(An)
	{2,	1,	 9,0,0,1,	13,0,2,1},	// Scc.B (d16,An)
	{4,	1,	11,0,0,1,	15,0,2,1},	// Scc.B (d8,An,Xn)
	{2,	1,	 9,0,0,1,	13,0,2,1},	// Scc.B (xxx).W
	{4,	1,	11,0,0,1,	15,0,2,1},	// Scc.B (xxx).L
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L #<data>.W		(See TRAPCC.W table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L #<data>.L		(See TRAPCC.L table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L 		(See TRAPCC table below)
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// Scc.B Dn
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// DBcc.W Dn,#<data>.W		(See DBcc table below)
	{2,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B (An)
	{0,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B (An)+
	{2,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B -(An)
	{2,	1,	 9,0,0,1,	13,0,2,1},	// Scc.B (d16,An)
	{4,	1,	11,0,0,1,	15,0,2,1},	// Scc.B (d8,An,Xn)
	{2,	1,	 9,0,0,1,	13,0,2,1},	// Scc.B (xxx).W
	{4,	1,	11,0,0,1,	15,0,2,1},	// Scc.B (xxx).L
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L #<data>.W		(See TRAPCC.W table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L #<data>.L		(See TRAPCC.L table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L 		(See TRAPCC table below)
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// Scc.B Dn
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// DBcc.W Dn,#<data>.W		(See DBcc table below)
	{2,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B (An)
	{0,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B (An)+
	{2,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B -(An)
	{2,	1,	 9,0,0,1,	13,0,2,1},	// Scc.B (d16,An)
	{4,	1,	11,0,0,1,	15,0,2,1},	// Scc.B (d8,An,Xn)
	{2,	1,	 9,0,0,1,	13,0,2,1},	// Scc.B (xxx).W
	{4,	1,	11,0,0,1,	15,0,2,1},	// Scc.B (xxx).L
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L #<data>.W		(See TRAPCC.W table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L #<data>.L		(See TRAPCC.L table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L 		(See TRAPCC table below)
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// Scc.B Dn
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// DBcc.W Dn,#<data>.W		(See DBcc table below)
	{2,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B (An)
	{0,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B (An)+
	{2,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B -(An)
	{2,	1,	 9,0,0,1,	13,0,2,1},	// Scc.B (d16,An)
	{4,	1,	11,0,0,1,	15,0,2,1},	// Scc.B (d8,An,Xn)
	{2,	1,	 9,0,0,1,	13,0,2,1},	// Scc.B (xxx).W
	{4,	1,	11,0,0,1,	15,0,2,1},	// Scc.B (xxx).L
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L #<data>.W		(See TRAPCC.W table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L #<data>.L		(See TRAPCC.L table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L 		(See TRAPCC table below)
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// Scc.B Dn
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// DBcc.W Dn,#<data>.W		(See DBcc table below)
	{2,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B (An)
	{0,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B (An)+
	{2,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B -(An)
	{2,	1,	 9,0,0,1,	13,0,2,1},	// Scc.B (d16,An)
	{4,	1,	11,0,0,1,	15,0,2,1},	// Scc.B (d8,An,Xn)
	{2,	1,	 9,0,0,1,	13,0,2,1},	// Scc.B (xxx).W
	{4,	1,	11,0,0,1,	15,0,2,1},	// Scc.B (xxx).L
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L #<data>.W		(See TRAPCC.W table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L #<data>.L		(See TRAPCC.L table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L 		(See TRAPCC table below)
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// Scc.B Dn
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// DBcc.W Dn,#<data>.W		(See DBcc table below)
	{2,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B (An)
	{0,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B (An)+
	{2,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B -(An)
	{2,	1,	 9,0,0,1,	13,0,2,1},	// Scc.B (d16,An)
	{4,	1,	11,0,0,1,	15,0,2,1},	// Scc.B (d8,An,Xn)
	{2,	1,	 9,0,0,1,	13,0,2,1},	// Scc.B (xxx).W
	{4,	1,	11,0,0,1,	15,0,2,1},	// Scc.B (xxx).L
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L #<data>.W		(See TRAPCC.W table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L #<data>.L		(See TRAPCC.L table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L 		(See TRAPCC table below)
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// Scc.B Dn
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// DBcc.W Dn,#<data>.W		(See DBcc table below)
	{2,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B (An)
	{0,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B (An)+
	{2,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B -(An)
	{2,	1,	 9,0,0,1,	13,0,2,1},	// Scc.B (d16,An)
	{4,	1,	11,0,0,1,	15,0,2,1},	// Scc.B (d8,An,Xn)
	{2,	1,	 9,0,0,1,	13,0,2,1},	// Scc.B (xxx).W
	{4,	1,	11,0,0,1,	15,0,2,1},	// Scc.B (xxx).L
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L #<data>.W		(See TRAPCC.W table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L #<data>.L		(See TRAPCC.L table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L 		(See TRAPCC table below)
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// Scc.B Dn
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// DBcc.W Dn,#<data>.W		(See DBcc table below)
	{2,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B (An)
	{0,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B (An)+
	{2,	1,	 9,0,0,1,	11,0,1,1},	// Scc.B -(An)
	{2,	1,	 9,0,0,1,	13,0,2,1},	// Scc.B (d16,An)
	{4,	1,	11,0,0,1,	15,0,2,1},	// Scc.B (d8,An,Xn)
	{2,	1,	 9,0,0,1,	13,0,2,1},	// Scc.B (xxx).W
	{4,	1,	11,0,0,1,	15,0,2,1},	// Scc.B (xxx).L
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L #<data>.W		(See TRAPCC.W table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L #<data>.L		(See TRAPCC.L table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// TRAPcc.L 		(See TRAPCC table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// Bcc.W #<data>.W		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BccQ.B #<data>		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// Bcc.L #<data>.L		(See Bcc table below)
	{2,	0,	 8,0,0,1,	15,0,2,1},	// BSR.W #<data>.W
	{2,	0,	 8,0,0,1,	15,0,2,1},	// BSRQ.B #<data>
	{2,	0,	12,0,0,1,	19,0,2,1},	// BSR.L #<data>.L
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// Bcc.W #<data>.W		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BccQ.B #<data>		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// Bcc.L #<data>.L		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// Bcc.W #<data>.W		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BccQ.B #<data>		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// Bcc.L #<data>.L		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// Bcc.W #<data>.W		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BccQ.B #<data>		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// Bcc.L #<data>.L		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// Bcc.W #<data>.W		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BccQ.B #<data>		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// Bcc.L #<data>.L		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// Bcc.W #<data>.W		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BccQ.B #<data>		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// Bcc.L #<data>.L		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// Bcc.W #<data>.W		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BccQ.B #<data>		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// Bcc.L #<data>.L		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// Bcc.W #<data>.W		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BccQ.B #<data>		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// Bcc.L #<data>.L		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// Bcc.W #<data>.W		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BccQ.B #<data>		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// Bcc.L #<data>.L		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// Bcc.W #<data>.W		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BccQ.B #<data>		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// Bcc.L #<data>.L		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// Bcc.W #<data>.W		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BccQ.B #<data>		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// Bcc.L #<data>.L		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// Bcc.W #<data>.W		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BccQ.B #<data>		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// Bcc.L #<data>.L		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// Bcc.W #<data>.W		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BccQ.B #<data>		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// Bcc.L #<data>.L		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// Bcc.W #<data>.W		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BccQ.B #<data>		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// Bcc.L #<data>.L		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// Bcc.W #<data>.W		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BccQ.B #<data>		(See Bcc table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// Bcc.L #<data>.L		(See Bcc table below)
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// MOVEQ.L #<data>,Dn
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// OR.B Dn,Dn
	{1,	1,	 7,1,0,0,	 9,1,1,0},	// OR.B (An),Dn
	{0,	1,	 7,1,0,0,	 9,1,1,0},	// OR.B (An)+,Dn
	{2,	2,	 8,1,0,0,	10,1,1,0},	// OR.B -(An),Dn
	{2,	2,	 8,1,0,0,	12,1,1,0},	// OR.B (d16,An),Dn
	{4,	2,	10,1,0,0,	14,1,2,0},	// OR.B (d8,An,Xn),Dn
	{2,	2,	 8,1,0,0,	12,1,2,0},	// OR.B (xxx).W,Dn
	{1,	0,	 8,1,0,0,	13,1,2,0},	// OR.B (xxx).L,Dn
	{2,	2,	 8,1,0,0,	12,1,2,0},	// OR.B (d16,PC),Dn
	{4,	2,	10,1,0,0,	14,1,2,0},	// OR.B (d8,PC,Xn),Dn
	{2,	0,	 4,0,0,0,	 8,0,2,0},	// OR.B #<data>.B,Dn
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// OR.W Dn,Dn
	{1,	1,	 7,1,0,0,	 9,1,1,0},	// OR.W (An),Dn
	{0,	1,	 7,1,0,0,	 9,1,1,0},	// OR.W (An)+,Dn
	{2,	2,	 8,1,0,0,	10,1,1,0},	// OR.W -(An),Dn
	{2,	2,	 8,1,0,0,	12,1,1,0},	// OR.W (d16,An),Dn
	{4,	2,	10,1,0,0,	14,1,2,0},	// OR.W (d8,An,Xn),Dn
	{2,	2,	 8,1,0,0,	12,1,2,0},	// OR.W (xxx).W,Dn
	{1,	0,	 8,1,0,0,	13,1,2,0},	// OR.W (xxx).L,Dn
	{2,	2,	 8,1,0,0,	12,1,2,0},	// OR.W (d16,PC),Dn
	{4,	2,	10,1,0,0,	14,1,2,0},	// OR.W (d8,PC,Xn),Dn
	{2,	0,	 4,0,0,0,	 8,0,2,0},	// OR.W #<data>.W,Dn
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// OR.L Dn,Dn
	{1,	1,	11,1,0,0,	13,1,1,0},	// OR.L (An),Dn
	{0,	1,	11,1,0,0,	13,1,1,0},	// OR.L (An)+,Dn
	{2,	2,	12,1,0,0,	14,1,1,0},	// OR.L -(An),Dn
	{2,	2,	12,1,0,0,	16,1,2,0},	// OR.L (d16,An),Dn
	{4,	2,	14,1,0,0,	18,1,2,0},	// OR.L (d8,An,Xn),Dn
	{2,	2,	12,1,0,0,	16,1,2,0},	// OR.L (xxx).W,Dn
	{1,	0,	12,1,0,0,	17,1,2,0},	// OR.L (xxx).L,Dn
	{2,	2,	12,1,0,0,	16,1,2,0},	// OR.L (d16,PC),Dn
	{4,	2,	14,1,0,0,	18,1,2,0},	// OR.L (d8,PC,Xn),Dn
	{4,	0,	 6,0,0,0,	10,0,2,0},	// OR.L #<data>.L,Dn
	{2,	0,	44,0,0,0,	46,0,1,0},	// DIVU.W Dn,Dn			(Max Value)
	{1,	1,	49,1,0,0,	51,1,1,0},	// DIVU.W (An),Dn		(Max Value)
	{0,	1,	49,1,0,0,	51,1,1,0},	// DIVU.W (An)+,Dn		(Max Value)
	{2,	2,	50,1,0,0,	52,1,1,0},	// DIVU.W -(An),Dn		(Max Value)
	{2,	2,	50,1,0,0,	54,1,2,0},	// DIVU.W (d16,An),Dn		(Max Value)
	{4,	2,	52,1,0,0,	56,1,2,0},	// DIVU.W (d8,An,Xn),Dn		(Max Value)
	{2,	2,	50,1,0,0,	54,1,2,0},	// DIVU.W (xxx).W,Dn		(Max Value)
	{1,	0,	50,1,0,0,	55,1,2,0},	// DIVU.W (xxx).L,Dn		(Max Value)
	{2,	2,	50,1,0,0,	54,1,2,0},	// DIVU.W (d16,PC),Dn		(Max Value)
	{4,	2,	52,1,0,0,	56,1,2,0},	// DIVU.W (d8,PC,Xn),Dn		(Max Value)
	{2,	0,	46,0,0,0,	50,0,2,0},	// DIVU.W #<data>.W,Dn		(Max Value)
	{0,	0,	 4,0,0,0,	 6,0,1,0},	// SBCD.B Dn,Dn
	{2,	1,	19,2,0,1,	22,2,1,1},	// SBCD.B -(An),-(An)
	{1,	2,	10,1,0,1,	13,1,1,1},	// OR.B Dn,(An)
	{0,	2,	10,1,0,1,	13,1,1,1},	// OR.B Dn,(An)+
	{2,	3,	11,1,0,1,	14,1,1,1},	// OR.B Dn,-(An)
	{2,	3,	11,1,0,1,	16,1,2,1},	// OR.B Dn,(d16,An)
	{4,	3,	13,1,0,1,	18,1,2,1},	// OR.B Dn,(d8,An,Xn)
	{2,	3,	11,1,0,1,	16,1,2,1},	// OR.B Dn,(xxx).W
	{1,	1,	11,1,0,1,	17,1,2,1},	// OR.B Dn,(xxx).L
	{6,	0,	 6,0,0,0,	 8,0,1,0},	// PACK.L Dn,Dn
	{2,	1,	23,1,0,1,	25,1,1,1},	// PACK.L -(An),-(An)
	{1,	2,	10,1,0,1,	13,1,1,1},	// OR.W Dn,(An)
	{0,	2,	10,1,0,1,	13,1,1,1},	// OR.W Dn,(An)+
	{2,	3,	11,1,0,1,	14,1,1,1},	// OR.W Dn,-(An)
	{2,	3,	11,1,0,1,	16,1,2,1},	// OR.W Dn,(d16,An)
	{4,	3,	13,1,0,1,	18,1,2,1},	// OR.W Dn,(d8,An,Xn)
	{2,	3,	11,1,0,1,	16,1,2,1},	// OR.W Dn,(xxx).W
	{1,	1,	11,1,0,1,	17,1,2,1},	// OR.W Dn,(xxx).L
	{8,	0,	 8,0,0,0,	10,0,1,0},	// UNPK.L Dn,Dn
	{2,	1,	23,1,0,1,	25,1,1,1},	// UNPK.L -(An),-(An)
	{1,	2,	18,1,0,1,	21,1,1,1},	// OR.L Dn,(An)
	{0,	2,	18,1,0,1,	21,1,1,1},	// OR.L Dn,(An)+
	{2,	3,	19,1,0,1,	22,1,1,1},	// OR.L Dn,-(An)
	{2,	3,	19,1,0,1,	24,1,2,1},	// OR.L Dn,(d16,An)
	{4,	3,	21,1,0,1,	26,1,2,1},	// OR.L Dn,(d8,An,Xn)
	{2,	3,	19,1,0,1,	24,1,2,1},	// OR.L Dn,(xxx).W
	{1,	1,	19,1,0,1,	25,1,2,1},	// OR.L Dn,(xxx).L
	{2,	0,	56,0,0,0,	58,0,1,0},	// DIVS.W Dn,Dn			(Max Value)
	{1,	1,	61,1,0,0,	63,1,1,0},	// DIVS.W (An),Dn		(Max Value)
	{0,	1,	61,1,0,0,	63,1,1,0},	// DIVS.W (An)+,Dn		(Max Value)
	{2,	2,	62,1,0,0,	64,1,1,0},	// DIVS.W -(An),Dn		(Max Value)
	{2,	2,	62,1,0,0,	66,1,2,0},	// DIVS.W (d16,An),Dn		(Max Value)
	{4,	2,	64,1,0,0,	68,1,2,0},	// DIVS.W (d8,An,Xn),Dn		(Max Value)
	{2,	2,	62,1,0,0,	66,1,2,0},	// DIVS.W (xxx).W,Dn		(Max Value)
	{1,	0,	62,1,0,0,	67,1,2,0},	// DIVS.W (xxx).L,Dn		(Max Value)
	{2,	2,	62,1,0,0,	66,1,2,0},	// DIVS.W (d16,PC),Dn		(Max Value)
	{4,	2,	64,1,0,0,	68,1,2,0},	// DIVS.W (d8,PC,Xn),Dn		(Max Value)
	{2,	0,	58,0,0,0,	62,0,2,0},	// DIVS.W #<data>.W,Dn		(Max Value)
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// SUB.B Dn,Dn
	{1,	1,	 7,1,0,0,	 9,1,1,0},	// SUB.B (An),Dn
	{0,	1,	 7,1,0,0,	 9,1,1,0},	// SUB.B (An)+,Dn
	{2,	2,	 8,1,0,0,	10,1,1,0},	// SUB.B -(An),Dn
	{2,	2,	 8,1,0,0,	12,1,1,0},	// SUB.B (d16,An),Dn
	{4,	2,	10,1,0,0,	14,1,2,0},	// SUB.B (d8,An,Xn),Dn
	{2,	2,	 8,1,0,0,	12,1,2,0},	// SUB.B (xxx).W,Dn
	{1,	0,	 8,1,0,0,	13,1,2,0},	// SUB.B (xxx).L,Dn
	{2,	2,	 8,1,0,0,	12,1,2,0},	// SUB.B (d16,PC),Dn
	{4,	2,	10,1,0,0,	14,1,2,0},	// SUB.B (d8,PC,Xn),Dn
	{2,	0,	 4,0,0,0,	 8,0,2,0},	// SUB.B #<data>.B,Dn
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// SUB.W Dn,Dn
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// SUB.W An,Dn
	{1,	1,	 7,1,0,0,	 9,1,1,0},	// SUB.W (An),Dn
	{0,	1,	 7,1,0,0,	 9,1,1,0},	// SUB.W (An)+,Dn
	{2,	2,	 8,1,0,0,	10,1,1,0},	// SUB.W -(An),Dn
	{2,	2,	 8,1,0,0,	12,1,1,0},	// SUB.W (d16,An),Dn
	{4,	2,	10,1,0,0,	14,1,2,0},	// SUB.W (d8,An,Xn),Dn
	{2,	2,	 8,1,0,0,	12,1,2,0},	// SUB.W (xxx).W,Dn
	{1,	0,	 8,1,0,0,	13,1,2,0},	// SUB.W (xxx).L,Dn
	{2,	2,	 8,1,0,0,	12,1,2,0},	// SUB.W (d16,PC),Dn
	{4,	2,	10,1,0,0,	14,1,2,0},	// SUB.W (d8,PC,Xn),Dn
	{2,	0,	 4,0,0,0,	 8,0,2,0},	// SUB.W #<data>.W,Dn
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// SUB.L Dn,Dn
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// SUB.L An,Dn
	{1,	1,	11,1,0,0,	13,1,1,0},	// SUB.L (An),Dn
	{0,	1,	11,1,0,0,	13,1,1,0},	// SUB.L (An)+,Dn
	{2,	2,	12,1,0,0,	14,1,1,0},	// SUB.L -(An),Dn
	{2,	2,	12,1,0,0,	16,1,2,0},	// SUB.L (d16,An),Dn
	{4,	2,	14,1,0,0,	18,1,2,0},	// SUB.L (d8,An,Xn),Dn
	{2,	2,	12,1,0,0,	16,1,2,0},	// SUB.L (xxx).W,Dn
	{1,	0,	12,1,0,0,	17,1,2,0},	// SUB.L (xxx).L,Dn
	{2,	2,	12,1,0,0,	16,1,2,0},	// SUB.L (d16,PC),Dn
	{4,	2,	14,1,0,0,	18,1,2,0},	// SUB.L (d8,PC,Xn),Dn
	{4,	0,	 6,0,0,0,	10,0,2,0},	// SUB.L #<data>.L,Dn
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// SUBA.W Dn,An
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// SUBA.W An,An
	{1,	1,	 9,1,0,0,	11,1,1,0},	// SUBA.W (An),An
	{0,	1,	 9,1,0,0,	11,1,1,0},	// SUBA.W (An)+,An
	{2,	2,	10,1,0,0,	12,1,1,0},	// SUBA.W -(An),An
	{2,	2,	10,1,0,0,	14,1,2,0},	// SUBA.W (d16,An),An
	{4,	2,	12,1,0,0,	16,1,2,0},	// SUBA.W (d8,An,Xn),An
	{2,	2,	10,1,0,0,	14,1,2,0},	// SUBA.W (xxx).W,An
	{1,	0,	10,1,0,0,	15,1,2,0},	// SUBA.W (xxx).L,An
	{2,	2,	10,1,0,0,	14,1,2,0},	// SUBA.W (d16,PC),An
	{4,	2,	12,1,0,0,	16,1,2,0},	// SUBA.W (d8,PC,Xn),An
	{2,	0,	 6,0,0,0,	10,0,2,0},	// SUBA.W #<data>.W,An
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// SUBX.B Dn,Dn
	{2,	1,	15,2,0,1,	18,2,1,1},	// SUBX.B -(An),-(An)
	{1,	2,	10,1,0,1,	13,1,1,1},	// SUB.B Dn,(An)
	{0,	2,	10,1,0,1,	13,1,1,1},	// SUB.B Dn,(An)+
	{2,	3,	11,1,0,1,	14,1,1,1},	// SUB.B Dn,-(An)
	{2,	3,	11,1,0,1,	16,1,2,1},	// SUB.B Dn,(d16,An)
	{4,	3,	13,1,0,1,	18,1,2,1},	// SUB.B Dn,(d8,An,Xn)
	{2,	3,	11,1,0,1,	16,1,2,1},	// SUB.B Dn,(xxx).W
	{1,	1,	11,1,0,1,	17,1,2,1},	// SUB.B Dn,(xxx).L
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// SUBX.W Dn,Dn
	{2,	1,	15,2,0,1,	18,2,1,1},	// SUBX.W -(An),-(An)
	{1,	2,	10,1,0,1,	13,1,1,1},	// SUB.W Dn,(An)
	{0,	2,	10,1,0,1,	13,1,1,1},	// SUB.W Dn,(An)+
	{2,	3,	11,1,0,1,	14,1,1,1},	// SUB.W Dn,-(An)
	{2,	3,	11,1,0,1,	16,1,2,1},	// SUB.W Dn,(d16,An)
	{4,	3,	13,1,0,1,	18,1,2,1},	// SUB.W Dn,(d8,An,Xn)
	{2,	3,	11,1,0,1,	16,1,2,1},	// SUB.W Dn,(xxx).W
	{1,	1,	11,1,0,1,	17,1,2,1},	// SUB.W Dn,(xxx).L
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// SUBX.L Dn,Dn
	{2,	1,	27,2,0,1,	30,2,1,1},	// SUBX.L -(An),-(An)
	{1,	2,	18,1,0,1,	21,1,1,1},	// SUB.L Dn,(An)
	{0,	2,	18,1,0,1,	21,1,1,1},	// SUB.L Dn,(An)+
	{2,	3,	19,1,0,1,	22,1,1,1},	// SUB.L Dn,-(An)
	{2,	3,	19,1,0,1,	24,1,2,1},	// SUB.L Dn,(d16,An)
	{4,	3,	21,1,0,1,	26,1,2,1},	// SUB.L Dn,(d8,An,Xn)
	{2,	3,	19,1,0,1,	24,1,2,1},	// SUB.L Dn,(xxx).W
	{1,	1,	19,1,0,1,	25,1,2,1},	// SUB.L Dn,(xxx).L
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// SUBA.L Dn,An
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// SUBA.L An,An
	{1,	1,	11,1,0,0,	13,1,1,0},	// SUBA.L (An),An
	{0,	1,	11,1,0,0,	13,1,1,0},	// SUBA.L (An)+,An
	{2,	2,	12,1,0,0,	14,1,1,0},	// SUBA.L -(An),An
	{2,	2,	12,1,0,0,	16,1,2,0},	// SUBA.L (d16,An),An
	{4,	2,	14,1,0,0,	18,1,2,0},	// SUBA.L (d8,An,Xn),An
	{2,	2,	12,1,0,0,	16,1,2,0},	// SUBA.L (xxx).W,An
	{1,	0,	12,1,0,0,	17,1,2,0},	// SUBA.L (xxx).L,An
	{2,	2,	12,1,0,0,	16,1,2,0},	// SUBA.L (d16,PC),An
	{4,	2,	14,1,0,0,	18,1,2,0},	// SUBA.L (d8,PC,Xn),An
	{4,	0,	 6,0,0,0,	10,0,2,0},	// SUBA.L #<data>.L,An
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// CMP.B Dn,Dn
	{1,	1,	 7,1,0,0,	 9,1,1,0},	// CMP.B (An),Dn
	{0,	1,	 7,1,0,0,	 9,1,1,0},	// CMP.B (An)+,Dn
	{2,	2,	 8,1,0,0,	10,1,1,0},	// CMP.B -(An),Dn
	{2,	2,	 8,1,0,0,	12,1,2,0},	// CMP.B (d16,An),Dn
	{4,	2,	10,1,0,0,	14,1,2,0},	// CMP.B (d8,An,Xn),Dn
	{2,	2,	 8,1,0,0,	12,1,2,0},	// CMP.B (xxx).W,Dn
	{1,	0,	 8,1,0,0,	13,1,2,0},	// CMP.B (xxx).L,Dn
	{2,	2,	 8,1,0,0,	12,1,2,0},	// CMP.B (d16,PC),Dn
	{4,	2,	10,1,0,0,	14,1,2,0},	// CMP.B (d8,PC,Xn),Dn
	{2,	0,	 4,0,0,0,	 8,0,2,0},	// CMP.B #<data>.B,Dn
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// CMP.W Dn,Dn
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// CMP.W An,Dn
	{1,	1,	 7,1,0,0,	 9,1,1,0},	// CMP.W (An),Dn
	{0,	1,	 7,1,0,0,	 9,1,1,0},	// CMP.W (An)+,Dn
	{2,	2,	 8,1,0,0,	10,1,1,0},	// CMP.W -(An),Dn
	{2,	2,	 8,1,0,0,	12,1,2,0},	// CMP.W (d16,An),Dn
	{4,	2,	10,1,0,0,	14,1,2,0},	// CMP.W (d8,An,Xn),Dn
	{2,	2,	 8,1,0,0,	12,1,2,0},	// CMP.W (xxx).W,Dn
	{1,	0,	 8,1,0,0,	13,1,2,0},	// CMP.W (xxx).L,Dn
	{2,	2,	 8,1,0,0,	12,1,2,0},	// CMP.W (d16,PC),Dn
	{4,	2,	10,1,0,0,	14,1,2,0},	// CMP.W (d8,PC,Xn),Dn
	{2,	0,	 4,0,0,0,	 8,0,2,0},	// CMP.W #<data>.W,Dn
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// CMP.L Dn,Dn
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// CMP.L An,Dn
	{1,	1,	11,1,0,0,	13,1,1,0},	// CMP.L (An),Dn
	{0,	1,	11,1,0,0,	13,1,1,0},	// CMP.L (An)+,Dn
	{2,	2,	12,1,0,0,	14,1,1,0},	// CMP.L -(An),Dn
	{2,	2,	12,1,0,0,	16,1,2,0},	// CMP.L (d16,An),Dn
	{4,	2,	14,1,0,0,	18,1,2,0},	// CMP.L (d8,An,Xn),Dn
	{2,	2,	12,1,0,0,	16,1,2,0},	// CMP.L (xxx).W,Dn
	{1,	0,	12,1,0,0,	17,1,2,0},	// CMP.L (xxx).L,Dn
	{2,	2,	12,1,0,0,	16,1,2,0},	// CMP.L (d16,PC),Dn
	{4,	2,	14,1,0,0,	18,1,2,0},	// CMP.L (d8,PC,Xn),Dn
	{4,	0,	 6,0,0,0,	10,0,2,0},	// CMP.L #<data>.L,Dn
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// CMPA.W Dn,An
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// CMPA.W An,An
	{1,	1,	 9,1,0,0,	11,1,1,0},	// CMPA.W (An),An
	{0,	1,	 9,1,0,0,	11,1,1,0},	// CMPA.W (An)+,An
	{2,	2,	10,1,0,0,	12,1,1,0},	// CMPA.W -(An),An
	{2,	2,	10,1,0,0,	14,1,2,0},	// CMPA.W (d16,An),An
	{4,	2,	12,1,0,0,	16,1,2,0},	// CMPA.W (d8,An,Xn),An
	{2,	2,	10,1,0,0,	14,1,2,0},	// CMPA.W (xxx).W,An
	{1,	0,	10,1,0,0,	15,1,2,0},	// CMPA.W (xxx).L,An
	{2,	2,	10,1,0,0,	14,1,2,0},	// CMPA.W (d16,PC),An
	{4,	2,	12,1,0,0,	16,1,2,0},	// CMPA.W (d8,PC,Xn),An
	{2,	0,	 6,0,0,0,	10,0,2,0},	// CMPA.W #<data>.W,An
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// EOR.B Dn,Dn
	{0,	0,	12,2,0,0,	14,2,1,0},	// CMPM.B (An)+,(An)+
	{1,	2,	10,1,0,1,	13,1,1,1},	// EOR.B Dn,(An)
	{0,	2,	10,1,0,1,	13,1,1,1},	// EOR.B Dn,(An)+
	{2,	3,	11,1,0,1,	14,1,1,1},	// EOR.B Dn,-(An)
	{2,	3,	11,1,0,1,	16,1,2,1},	// EOR.B Dn,(d16,An)
	{4,	3,	13,1,0,1,	18,1,2,1},	// EOR.B Dn,(d8,An,Xn)
	{2,	3,	11,1,0,1,	16,1,2,1},	// EOR.B Dn,(xxx).W
	{1,	1,	11,1,0,1,	17,1,2,1},	// EOR.B Dn,(xxx).L
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// EOR.W Dn,Dn
	{0,	0,	12,2,0,0,	14,2,1,0},	// CMPM.W (An)+,(An)+
	{1,	2,	10,1,0,1,	13,1,1,1},	// EOR.W Dn,(An)
	{0,	2,	10,1,0,1,	13,1,1,1},	// EOR.W Dn,(An)+
	{2,	3,	11,1,0,1,	14,1,1,1},	// EOR.W Dn,-(An)
	{2,	3,	11,1,0,1,	16,1,2,1},	// EOR.W Dn,(d16,An)
	{4,	3,	13,1,0,1,	18,1,2,1},	// EOR.W Dn,(d8,An,Xn)
	{2,	3,	11,1,0,1,	16,1,2,1},	// EOR.W Dn,(xxx).W
	{1,	1,	11,1,0,1,	17,1,2,1},	// EOR.W Dn,(xxx).L
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// EOR.L Dn,Dn
	{0,	0,	20,2,0,0,	24,2,1,0},	// CMPM.L (An)+,(An)+
	{1,	2,	18,1,0,1,	21,1,1,1},	// EOR.L Dn,(An)
	{0,	2,	18,1,0,1,	21,1,1,1},	// EOR.L Dn,(An)+
	{2,	3,	19,1,0,1,	22,1,1,1},	// EOR.L Dn,-(An)
	{2,	3,	19,1,0,1,	24,1,2,1},	// EOR.L Dn,(d16,An)
	{4,	3,	21,1,0,1,	26,1,2,1},	// EOR.L Dn,(d8,An,Xn)
	{2,	3,	19,1,0,1,	24,1,2,1},	// EOR.L Dn,(xxx).W
	{1,	1,	19,1,0,1,	25,1,2,1},	// EOR.L Dn,(xxx).L
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// CMPA.L Dn,An
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// CMPA.L An,An
	{1,	1,	13,1,0,0,	15,1,1,0},	// CMPA.L (An),An
	{0,	1,	13,1,0,0,	15,1,1,0},	// CMPA.L (An)+,An
	{2,	2,	14,1,0,0,	16,1,1,0},	// CMPA.L -(An),An
	{2,	2,	14,1,0,0,	18,1,2,0},	// CMPA.L (d16,An),An
	{4,	2,	16,1,0,0,	20,1,2,0},	// CMPA.L (d8,An,Xn),An
	{2,	2,	14,1,0,0,	18,1,2,0},	// CMPA.L (xxx).W,An
	{1,	0,	14,1,0,0,	19,1,2,0},	// CMPA.L (xxx).L,An
	{2,	2,	14,1,0,0,	18,1,2,0},	// CMPA.L (d16,PC),An
	{4,	2,	16,1,0,0,	20,1,2,0},	// CMPA.L (d8,PC,Xn),An
	{4,	0,	 8,0,0,0,	12,0,2,0},	// CMPA.L #<data>.L,An
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// AND.B Dn,Dn
	{1,	1,	 7,1,0,0,	 9,1,1,0},	// AND.B (An),Dn
	{0,	1,	 7,1,0,0,	 9,1,1,0},	// AND.B (An)+,Dn
	{2,	2,	 8,1,0,0,	10,1,1,0},	// AND.B -(An),Dn
	{2,	2,	 8,1,0,0,	12,1,1,0},	// AND.B (d16,An),Dn
	{4,	2,	10,1,0,0,	14,1,2,0},	// AND.B (d8,An,Xn),Dn
	{2,	2,	 8,1,0,0,	12,1,2,0},	// AND.B (xxx).W,Dn
	{1,	0,	 8,1,0,0,	13,1,2,0},	// AND.B (xxx).L,Dn
	{2,	2,	 8,1,0,0,	12,1,2,0},	// AND.B (d16,PC),Dn
	{4,	2,	10,1,0,0,	14,1,2,0},	// AND.B (d8,PC,Xn),Dn
	{2,	0,	 4,0,0,0,	 8,0,2,0},	// AND.B #<data>.B,Dn
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// AND.W Dn,Dn
	{1,	1,	 7,1,0,0,	 9,1,1,0},	// AND.W (An),Dn
	{0,	1,	 7,1,0,0,	 9,1,1,0},	// AND.W (An)+,Dn
	{2,	2,	 8,1,0,0,	10,1,1,0},	// AND.W -(An),Dn
	{2,	2,	 8,1,0,0,	12,1,1,0},	// AND.W (d16,An),Dn
	{4,	2,	10,1,0,0,	14,1,2,0},	// AND.W (d8,An,Xn),Dn
	{2,	2,	 8,1,0,0,	12,1,2,0},	// AND.W (xxx).W,Dn
	{1,	0,	 8,1,0,0,	13,1,2,0},	// AND.W (xxx).L,Dn
	{2,	2,	 8,1,0,0,	12,1,2,0},	// AND.W (d16,PC),Dn
	{4,	2,	10,1,0,0,	14,1,2,0},	// AND.W (d8,PC,Xn),Dn
	{2,	0,	 4,0,0,0,	 8,0,2,0},	// AND.W #<data>.W,Dn
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// AND.L Dn,Dn
	{1,	1,	11,1,0,0,	13,1,1,0},	// AND.L (An),Dn
	{0,	1,	11,1,0,0,	13,1,1,0},	// AND.L (An)+,Dn
	{2,	2,	12,1,0,0,	14,1,1,0},	// AND.L -(An),Dn
	{2,	2,	12,1,0,0,	16,1,2,0},	// AND.L (d16,An),Dn
	{4,	2,	14,1,0,0,	18,1,2,0},	// AND.L (d8,An,Xn),Dn
	{2,	2,	12,1,0,0,	16,1,2,0},	// AND.L (xxx).W,Dn
	{1,	0,	12,1,0,0,	17,1,2,0},	// AND.L (xxx).L,Dn
	{2,	2,	12,1,0,0,	16,1,2,0},	// AND.L (d16,PC),Dn
	{4,	2,	14,1,0,0,	18,1,2,0},	// AND.L (d8,PC,Xn),Dn
	{4,	0,	 6,0,0,0,	10,0,2,0},	// AND.L #<data>.L,Dn
	{2,	0,	28,0,0,0,	30,0,1,0},	// MULU.W Dn,Dn			(Max Value)
	{3,	1,	33,1,0,0,	35,1,1,0},	// MULU.W (An),Dn		(Max Value)
	{2,	1,	33,1,0,0,	35,1,1,0},	// MULU.W (An)+,Dn		(Max Value)
	{4,	2,	34,1,0,0,	36,1,1,0},	// MULU.W -(An),Dn		(Max Value)
	{4,	1,	34,1,0,0,	38,1,2,0},	// MULU.W (d16,An),Dn		(Max Value)
	{6,	2,	36,1,0,0,	40,1,2,0},	// MULU.W (d8,An,Xn),Dn		(Max Value)
	{4,	2,	34,1,0,0,	38,1,2,0},	// MULU.W (xxx).W,Dn		(Max Value)
	{3,	0,	34,1,0,0,	39,1,2,0},	// MULU.W (xxx).L,Dn		(Max Value)
	{4,	1,	34,1,0,0,	38,1,2,0},	// MULU.W (d16,PC),Dn		(Max Value)
	{6,	2,	36,1,0,0,	40,1,2,0},	// MULU.W (d8,PC,Xn),Dn		(Max Value)
	{4,	0,	30,0,0,0,	38,0,2,0},	// MULU.W #<data>.W,Dn		(Max Value)
	{0,	0,	 4,0,0,0,	 6,0,1,0},	// ABCD.B Dn,Dn
	{2,	1,	19,2,0,1,	22,2,1,1},	// ABCD.B -(An),-(An)
	{1,	2,	10,1,0,1,	13,1,1,1},	// AND.B Dn,(An)
	{0,	2,	10,1,0,1,	13,1,1,1},	// AND.B Dn,(An)+
	{2,	3,	11,1,0,1,	14,1,1,1},	// AND.B Dn,-(An)
	{2,	3,	11,1,0,1,	16,1,2,1},	// AND.B Dn,(d16,An)
	{4,	3,	13,1,0,1,	18,1,2,1},	// AND.B Dn,(d8,An,Xn)
	{2,	3,	11,1,0,1,	16,1,2,1},	// AND.B Dn,(xxx).W
	{1,	1,	11,1,0,1,	17,1,2,1},	// AND.B Dn,(xxx).L
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// EXG.L Dn,Dn
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// EXG.L An,An
	{1,	2,	10,1,0,1,	13,1,1,1},	// AND.W Dn,(An)
	{0,	2,	10,1,0,1,	13,1,1,1},	// AND.W Dn,(An)+
	{2,	3,	11,1,0,1,	14,1,1,1},	// AND.W Dn,-(An)
	{2,	3,	11,1,0,1,	16,1,2,1},	// AND.W Dn,(d16,An)
	{4,	3,	13,1,0,1,	18,1,2,1},	// AND.W Dn,(d8,An,Xn)
	{2,	3,	11,1,0,1,	16,1,2,1},	// AND.W Dn,(xxx).W
	{1,	1,	11,1,0,1,	17,1,2,1},	// AND.W Dn,(xxx).L
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// EXG.L Dn,An
	{1,	2,	18,1,0,1,	21,1,1,1},	// AND.L Dn,(An)
	{0,	2,	18,1,0,1,	21,1,1,1},	// AND.L Dn,(An)+
	{2,	3,	19,1,0,1,	22,1,1,1},	// AND.L Dn,-(An)
	{2,	3,	19,1,0,1,	24,1,2,1},	// AND.L Dn,(d16,An)
	{4,	3,	21,1,0,1,	26,1,2,1},	// AND.L Dn,(d8,An,Xn)
	{2,	3,	19,1,0,1,	24,1,2,1},	// AND.L Dn,(xxx).W
	{1,	1,	19,1,0,1,	25,1,2,1},	// AND.L Dn,(xxx).L
	{2,	0,	28,0,0,0,	30,0,1,0},	// MULS.W Dn,Dn			(Max Value)
	{3,	1,	33,1,0,0,	35,1,1,0},	// MULS.W (An),Dn		(Max Value)
	{2,	1,	33,1,0,0,	35,1,1,0},	// MULS.W (An)+,Dn		(Max Value)
	{4,	2,	34,1,0,0,	36,1,1,0},	// MULS.W -(An),Dn		(Max Value)
	{4,	1,	34,1,0,0,	38,1,2,0},	// MULS.W (d16,An),Dn		(Max Value)
	{6,	2,	36,1,0,0,	40,1,2,0},	// MULS.W (d8,An,Xn),Dn		(Max Value)
	{4,	2,	34,1,0,0,	38,1,2,0},	// MULS.W (xxx).W,Dn		(Max Value)
	{3,	0,	34,1,0,0,	39,1,2,0},	// MULS.W (xxx).L,Dn		(Max Value)
	{4,	1,	34,1,0,0,	38,1,2,0},	// MULS.W (d16,PC),Dn		(Max Value)
	{6,	2,	36,1,0,0,	40,1,2,0},	// MULS.W (d8,PC,Xn),Dn		(Max Value)
	{4,	0,	30,0,0,0,	38,0,2,0},	// MULS.W #<data>.W,Dn		(Max Value)
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// ADD.B Dn,Dn
	{1,	1,	 7,1,0,0,	 9,1,1,0},	// ADD.B (An),Dn
	{0,	1,	 7,1,0,0,	 9,1,1,0},	// ADD.B (An)+,Dn
	{2,	2,	 8,1,0,0,	10,1,1,0},	// ADD.B -(An),Dn
	{2,	2,	 8,1,0,0,	12,1,1,0},	// ADD.B (d16,An),Dn
	{4,	2,	10,1,0,0,	14,1,2,0},	// ADD.B (d8,An,Xn),Dn
	{2,	2,	 8,1,0,0,	12,1,2,0},	// ADD.B (xxx).W,Dn
	{1,	0,	 8,1,0,0,	13,1,2,0},	// ADD.B (xxx).L,Dn
	{2,	2,	 8,1,0,0,	12,1,2,0},	// ADD.B (d16,PC),Dn
	{4,	2,	10,1,0,0,	14,1,2,0},	// ADD.B (d8,PC,Xn),Dn
	{2,	0,	 4,0,0,0,	 8,0,2,0},	// ADD.B #<data>.B,Dn
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// ADD.W Dn,Dn
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// ADD.W An,Dn
	{1,	1,	 7,1,0,0,	 9,1,1,0},	// ADD.W (An),Dn
	{0,	1,	 7,1,0,0,	 9,1,1,0},	// ADD.W (An)+,Dn
	{2,	2,	 8,1,0,0,	10,1,1,0},	// ADD.W -(An),Dn
	{2,	2,	 8,1,0,0,	12,1,1,0},	// ADD.W (d16,An),Dn
	{4,	2,	10,1,0,0,	14,1,2,0},	// ADD.W (d8,An,Xn),Dn
	{2,	2,	 8,1,0,0,	12,1,2,0},	// ADD.W (xxx).W,Dn
	{1,	0,	 8,1,0,0,	13,1,2,0},	// ADD.W (xxx).L,Dn
	{2,	2,	 8,1,0,0,	12,1,2,0},	// ADD.W (d16,PC),Dn
	{4,	2,	10,1,0,0,	14,1,2,0},	// ADD.W (d8,PC,Xn),Dn
	{2,	0,	 4,0,0,0,	 8,0,2,0},	// ADD.W #<data>.W,Dn
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// ADD.L Dn,Dn
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// ADD.L An,Dn
	{1,	1,	11,1,0,0,	13,1,1,0},	// ADD.L (An),Dn
	{0,	1,	11,1,0,0,	13,1,1,0},	// ADD.L (An)+,Dn
	{2,	2,	12,1,0,0,	14,1,1,0},	// ADD.L -(An),Dn
	{2,	2,	12,1,0,0,	16,1,2,0},	// ADD.L (d16,An),Dn
	{4,	2,	14,1,0,0,	18,1,2,0},	// ADD.L (d8,An,Xn),Dn
	{2,	2,	12,1,0,0,	16,1,2,0},	// ADD.L (xxx).W,Dn
	{1,	0,	12,1,0,0,	17,1,2,0},	// ADD.L (xxx).L,Dn
	{2,	2,	12,1,0,0,	16,1,2,0},	// ADD.L (d16,PC),Dn
	{4,	2,	14,1,0,0,	18,1,2,0},	// ADD.L (d8,PC,Xn),Dn
	{4,	0,	 6,0,0,0,	10,0,2,0},	// ADD.L #<data>.L,Dn
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// ADDA.W Dn,An
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// ADDA.W An,An
	{1,	1,	 9,1,0,0,	11,1,1,0},	// ADDA.W (An),An
	{0,	1,	 9,1,0,0,	11,1,1,0},	// ADDA.W (An)+,An
	{2,	2,	10,1,0,0,	12,1,1,0},	// ADDA.W -(An),An
	{2,	2,	10,1,0,0,	14,1,2,0},	// ADDA.W (d16,An),An
	{4,	2,	12,1,0,0,	16,1,2,0},	// ADDA.W (d8,An,Xn),An
	{2,	2,	10,1,0,0,	14,1,2,0},	// ADDA.W (xxx).W,An
	{1,	0,	10,1,0,0,	15,1,2,0},	// ADDA.W (xxx).L,An
	{2,	2,	10,1,0,0,	14,1,2,0},	// ADDA.W (d16,PC),An
	{4,	2,	12,1,0,0,	16,1,2,0},	// ADDA.W (d8,PC,Xn),An
	{2,	0,	 6,0,0,0,	10,0,2,0},	// ADDA.W #<data>.W,An
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// ADDX.B Dn,Dn
	{2,	1,	15,2,0,1,	18,2,1,1},	// ADDX.B -(An),-(An)
	{1,	2,	10,1,0,1,	13,1,1,1},	// ADD.B Dn,(An)
	{0,	2,	10,1,0,1,	13,1,1,1},	// ADD.B Dn,(An)+
	{2,	3,	11,1,0,1,	14,1,1,1},	// ADD.B Dn,-(An)
	{2,	3,	11,1,0,1,	16,1,2,1},	// ADD.B Dn,(d16,An)
	{4,	3,	13,1,0,1,	18,1,2,1},	// ADD.B Dn,(d8,An,Xn)
	{2,	3,	11,1,0,1,	16,1,2,1},	// ADD.B Dn,(xxx).W
	{1,	1,	11,1,0,1,	17,1,2,1},	// ADD.B Dn,(xxx).L
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// ADDX.W Dn,Dn
	{2,	1,	15,2,0,1,	18,2,1,1},	// ADDX.W -(An),-(An)
	{1,	2,	10,1,0,1,	13,1,1,1},	// ADD.W Dn,(An)
	{0,	2,	10,1,0,1,	13,1,1,1},	// ADD.W Dn,(An)+
	{2,	3,	11,1,0,1,	14,1,1,1},	// ADD.W Dn,-(An)
	{2,	3,	11,1,0,1,	16,1,2,1},	// ADD.W Dn,(d16,An)
	{4,	3,	13,1,0,1,	18,1,2,1},	// ADD.W Dn,(d8,An,Xn)
	{2,	3,	11,1,0,1,	16,1,2,1},	// ADD.W Dn,(xxx).W
	{1,	1,	11,1,0,1,	17,1,2,1},	// ADD.W Dn,(xxx).L
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// ADDX.L Dn,Dn
	{2,	1,	27,2,0,1,	30,2,1,1},	// ADDX.L -(An),-(An)
	{1,	2,	18,1,0,1,	21,1,1,1},	// ADD.L Dn,(An)
	{0,	2,	18,1,0,1,	21,1,1,1},	// ADD.L Dn,(An)+
	{2,	3,	19,1,0,1,	22,1,1,1},	// ADD.L Dn,-(An)
	{2,	3,	19,1,0,1,	24,1,2,1},	// ADD.L Dn,(d16,An)
	{4,	3,	21,1,0,1,	26,1,2,1},	// ADD.L Dn,(d8,An,Xn)
	{2,	3,	19,1,0,1,	24,1,2,1},	// ADD.L Dn,(xxx).W
	{1,	1,	19,1,0,1,	25,1,2,1},	// ADD.L Dn,(xxx).L
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// ADDA.L Dn,An
	{2,	0,	 2,0,0,0,	 4,0,1,0},	// ADDA.L An,An
	{1,	1,	11,1,0,0,	13,1,1,0},	// ADDA.L (An),An
	{0,	1,	11,1,0,0,	13,1,1,0},	// ADDA.L (An)+,An
	{2,	2,	12,1,0,0,	14,1,1,0},	// ADDA.L -(An),An
	{2,	2,	12,1,0,0,	16,1,2,0},	// ADDA.L (d16,An),An
	{4,	2,	14,1,0,0,	18,1,2,0},	// ADDA.L (d8,An,Xn),An
	{2,	2,	12,1,0,0,	16,1,2,0},	// ADDA.L (xxx).W,An
	{1,	0,	12,1,0,0,	17,1,2,0},	// ADDA.L (xxx).L,An
	{2,	2,	12,1,0,0,	16,1,2,0},	// ADDA.L (d16,PC),An
	{4,	2,	14,1,0,0,	18,1,2,0},	// ADDA.L (d8,PC,Xn),An
	{4,	0,	 6,0,0,0,	10,0,2,0},	// ADDA.L #<data>.L,An
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// ASRQ.B #<data>,Dn
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// LSRQ.B #<data>,Dn
	{},	// ROXRQ.B #<data>,Dn
	{4,	0,	 6,0,0,0,	 8,0,1,0},	// RORQ.B #<data>,Dn
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// ASR.B Dn,Dn		(See ASR table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// LSR.B Dn,Dn		(See LSD table below)
	{10,	0,	12,0,0,0,	14,0,1,0},	// ROXR.B Dn,Dn
	{6,	0,	 8,0,0,0,	10,0,1,0},	// ROR.B Dn,Dn
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// ASRQ.W #<data>,Dn
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// LSRQ.W #<data>,Dn
	{},	// ROXRQ.W #<data>,Dn
	{4,	0,	 6,0,0,0,	 8,0,1,0},	// RORQ.W #<data>,Dn
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// ASR.W Dn,Dn		(See ASR table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// LSR.W Dn,Dn		(See LSD table below)
	{10,	0,	12,0,0,0,	14,0,1,0},	// ROXR.W Dn,Dn
	{6,	0,	 8,0,0,0,	10,0,1,0},	// ROR.W Dn,Dn
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// ASRQ.L #<data>,Dn
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// LSRQ.L #<data>,Dn
	{},	// ROXRQ.L #<data>,Dn
	{4,	0,	 6,0,0,0,	 8,0,1,0},	// RORQ.L #<data>,Dn
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// ASR.L Dn,Dn		(See ASR table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// LSR.L Dn,Dn		(See LSD table below)
	{10,	0,	12,0,0,0,	14,0,1,0},	// ROXR.L Dn,Dn
	{6,	0,	 8,0,0,0,	10,0,1,0},	// ROR.L Dn,Dn
	{1,	1,	11,1,0,1,	13,1,1,1},	// ASRW.W (An)
	{0,	1,	11,1,0,1,	13,1,1,1},	// ASRW.W (An)+
	{2,	2,	12,1,0,1,	14,1,1,1},	// ASRW.W -(An)
	{2,	2,	12,1,0,1,	16,1,2,1},	// ASRW.W (d16,An)
	{4,	2,	14,1,0,1,	18,1,2,1},	// ASRW.W (d8,An,Xn)
	{2,	2,	12,1,0,1,	16,1,2,1},	// ASRW.W (xxx).W
	{1,	0,	12,1,0,1,	17,1,2,1},	// ASRW.W (xxx).L
	{2,	0,	 6,0,0,0,	 8,0,1,0},	// ASLQ.B #<data>,Dn
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// LSLQ.B #<data>,Dn
	{},	// ROXLQ.B #<data>,Dn
	{4,	0,	 6,0,0,0,	 8,0,1,0},	// ROLQ.B #<data>,Dn
	{4,	0,	 8,0,0,0,	10,0,1,0},	// ASL.B Dn,Dn
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// LSL.B Dn,Dn		(See LSD table below)
	{10,	0,	12,0,0,0,	14,0,1,0},	// ROXL.B Dn,Dn
	{6,	0,	 8,0,0,0,	10,0,1,0},	// ROL.B Dn,Dn
	{2,	0,	 6,0,0,0,	 8,0,1,0},	// ASLQ.W #<data>,Dn
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// LSLQ.W #<data>,Dn
	{},	// ROXLQ.W #<data>,Dn
	{4,	0,	 6,0,0,0,	 8,0,1,0},	// ROLQ.W #<data>,Dn
	{4,	0,	 8,0,0,0,	10,0,1,0},	// ASL.W Dn,Dn
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// LSL.W Dn,Dn		(See LSD table below)
	{10,	0,	12,0,0,0,	14,0,1,0},	// ROXL.W Dn,Dn
	{6,	0,	 8,0,0,0,	10,0,1,0},	// ROL.W Dn,Dn
	{2,	0,	 6,0,0,0,	 8,0,1,0},	// ASLQ.L #<data>,Dn
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// LSLQ.L #<data>,Dn
	{},	// ROXLQ.L #<data>,Dn
	{4,	0,	 6,0,0,0,	 8,0,1,0},	// ROLQ.L #<data>,Dn
	{4,	0,	 8,0,0,0,	10,0,1,0},	// ASL.L Dn,Dn
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// LSL.L Dn,Dn		(See LSD table below)
	{10,	0,	12,0,0,0,	14,0,1,0},	// ROXL.L Dn,Dn
	{6,	0,	 8,0,0,0,	10,0,1,0},	// ROL.L Dn,Dn
	{1,	1,	13,1,0,1,	15,1,1,1},	// ASLW.W (An)
	{0,	1,	13,1,0,1,	15,1,1,1},	// ASLW.W (An)+
	{2,	2,	14,1,0,1,	16,1,1,1},	// ASLW.W -(An)
	{2,	2,	14,1,0,1,	18,1,2,1},	// ASLW.W (d16,An)
	{4,	2,	16,1,0,1,	20,1,2,1},	// ASLW.W (d8,An,Xn)
	{2,	2,	14,1,0,1,	18,1,2,1},	// ASLW.W (xxx).W
	{1,	0,	14,1,0,1,	19,1,2,1},	// ASLW.W (xxx).L
	{1,	1,	11,1,0,1,	13,1,1,1},	// LSRW.W (An)
	{0,	1,	11,1,0,1,	13,1,1,1},	// LSRW.W (An)+
	{2,	2,	12,1,0,1,	14,1,1,1},	// LSRW.W -(An)
	{2,	2,	12,1,0,1,	16,1,2,1},	// LSRW.W (d16,An)
	{4,	2,	14,1,0,1,	18,1,2,1},	// LSRW.W (d8,An,Xn)
	{2,	2,	12,1,0,1,	16,1,2,1},	// LSRW.W (xxx).W
	{1,	0,	12,1,0,1,	17,1,2,1},	// LSRW.W (xxx).L
	{1,	1,	11,1,0,1,	13,1,1,1},	// LSLW.W (An)
	{0,	1,	11,1,0,1,	13,1,1,1},	// LSLW.W (An)+
	{2,	2,	12,1,0,1,	14,1,1,1},	// LSLW.W -(An)
	{2,	2,	12,1,0,1,	16,1,2,1},	// LSLW.W (d16,An)
	{4,	2,	14,1,0,1,	18,1,2,1},	// LSLW.W (d8,An,Xn)
	{2,	2,	12,1,0,1,	16,1,2,1},	// LSLW.W (xxx).W
	{1,	0,	12,1,0,1,	17,1,2,1},	// LSLW.W (xxx).L
	{1,	1,	 9,1,0,0,	11,1,1,0},	// ROXRW.W (An)
	{0,	1,	 9,1,0,0,	11,1,1,0},	// ROXRW.W (An)+
	{2,	2,	10,1,0,0,	12,1,1,0},	// ROXRW.W -(An)
	{2,	2,	10,1,0,0,	14,1,2,0},	// ROXRW.W (d16,An)
	{4,	2,	12,1,0,0,	16,1,2,0},	// ROXRW.W (d8,An,Xn)
	{2,	2,	10,1,0,0,	14,1,2,0},	// ROXRW.W (xxx).W
	{1,	0,	10,1,0,0,	15,1,2,0},	// ROXRW.W (xxx).L
	{1,	1,	 9,1,0,0,	11,1,1,0},	// ROXLW.W (An)
	{0,	1,	 9,1,0,0,	11,1,1,0},	// ROXLW.W (An)+
	{2,	2,	10,1,0,0,	12,1,1,0},	// ROXLW.W -(An)
	{2,	2,	10,1,0,0,	14,1,2,0},	// ROXLW.W (d16,An)
	{4,	2,	12,1,0,0,	16,1,2,0},	// ROXLW.W (d8,An,Xn)
	{2,	2,	10,1,0,0,	14,1,2,0},	// ROXLW.W (xxx).W
	{1,	0,	10,1,0,0,	15,1,2,0},	// ROXLW.W (xxx).L
	{1,	1,	13,1,0,1,	15,1,1,1},	// RORW.W (An)
	{0,	1,	13,1,0,1,	15,1,1,1},	// RORW.W (An)+
	{2,	2,	14,1,0,1,	16,1,1,1},	// RORW.W -(An)
	{2,	2,	14,1,0,1,	18,1,2,1},	// RORW.W (d16,An)
	{4,	2,	16,1,0,1,	20,1,2,1},	// RORW.W (d8,An,Xn)
	{2,	2,	14,1,0,1,	18,1,2,1},	// RORW.W (xxx).W
	{1,	0,	14,1,0,1,	19,1,2,1},	// RORW.W (xxx).L
	{1,	1,	13,1,0,1,	15,1,1,1},	// ROLW.W (An)
	{0,	1,	13,1,0,1,	15,1,1,1},	// ROLW.W (An)+
	{2,	2,	14,1,0,1,	16,1,1,1},	// ROLW.W -(An)
	{2,	2,	14,1,0,1,	18,1,2,1},	// ROLW.W (d16,An)
	{4,	2,	16,1,0,1,	20,1,2,1},	// ROLW.W (d8,An,Xn)
	{2,	2,	14,1,0,1,	18,1,2,1},	// ROLW.W (xxx).W
	{1,	0,	14,1,0,1,	19,1,2,1},	// ROLW.W (xxx).L
	{8,	0,	 8,0,0,0,	10,0,1,0},	// BFTST.L #<data>.W,Dn
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFTST.L #<data>.W,(An)		(See BFTST table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFTST.L #<data>.W,(d16,An)		(See BFTST table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFTST.L #<data>.W,(d8,An,Xn)		(See BFTST table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFTST.L #<data>.W,(xxx).W		(See BFTST table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFTST.L #<data>.W,(xxx).L		(See BFTST table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFTST.L #<data>.W,(d16,PC)		(See BFTST table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFTST.L #<data>.W,(d8,PC,Xn)		(See BFTST table below)
	{10,	0,	10,0,0,0,	12,0,1,0},	// BFEXTU.L #<data>.W,Dn
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFEXTU.L #<data>.W,(An)		(See BFEXTU table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFEXTU.L #<data>.W,(d16,An)		(See BFEXTU table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFEXTU.L #<data>.W,(d8,An,Xn)		(See BFEXTU table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFEXTU.L #<data>.W,(xxx).W		(See BFEXTU table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFEXTU.L #<data>.W,(xxx).L		(See BFEXTU table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFEXTU.L #<data>.W,(d16,PC)		(See BFEXTU table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFEXTU.L #<data>.W,(d8,PC,Xn)		(See BFEXTU table below)
	{14,	0,	14,0,0,0,	16,0,1,0},	// BFCHG.L #<data>.W,Dn
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFCHG.L #<data>.W,(An)		(See BFCHG table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFCHG.L #<data>.W,(d16,An)		(See BFCHG table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFCHG.L #<data>.W,(d8,An,Xn)		(See BFCHG table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFCHG.L #<data>.W,(xxx).W		(See BFCHG table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFCHG.L #<data>.W,(xxx).L		(See BFCHG table below)
	{10,	0,	10,0,0,0,	12,0,1,0},	// BFEXTS.L #<data>.W,Dn
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFEXTS.L #<data>.W,(An)		(See BFEXTS table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFEXTS.L #<data>.W,(d16,An)		(See BFEXTS table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFEXTS.L #<data>.W,(d8,An,Xn)		(See BFEXTS table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFEXTS.L #<data>.W,(xxx).W		(See BFEXTS table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFEXTS.L #<data>.W,(xxx).L		(See BFEXTS table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFEXTS.L #<data>.W,(d16,PC)		(See BFEXTS table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFEXTS.L #<data>.W,(d8,PC,Xn)		(See BFEXTS table below)
	{14,	0,	14,0,0,0,	16,0,1,0},	// BFCLR.L #<data>.W,Dn
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFCLR.L #<data>.W,(An)		(See BFCLR table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFCLR.L #<data>.W,(d16,An)		(See BFEXTS table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFCLR.L #<data>.W,(d8,An,Xn)		(See BFEXTS table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFCLR.L #<data>.W,(xxx).W		(See BFEXTS table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFCLR.L #<data>.W,(xxx).L		(See BFEXTS table below)
	{20,	0,	20,0,0,0,	22,0,1,0},	// BFFFO.L #<data>.W,Dn
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFFFO.L #<data>.W,(An)		(See BFFFO table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFFFO.L #<data>.W,(d16,An)		(See BFFFO table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFFFO.L #<data>.W,(d8,An,Xn)		(See BFFFO table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFFFO.L #<data>.W,(xxx).W		(See BFFFO table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFFFO.L #<data>.W,(xxx).L		(See BFFFO table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFFFO.L #<data>.W,(d16,PC)		(See BFFFO table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFFFO.L #<data>.W,(d8,PC,Xn)		(See BFFFO table below)
	{14,	0,	14,0,0,0,	16,0,1,0},	// BFSET.L #<data>.W,Dn
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFSET.L #<data>.W,(An)		(See BFSET table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFSET.L #<data>.W,(d16,An)		(See BFSET table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFSET.L #<data>.W,(d8,An,Xn)		(See BFSET table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFSET.L #<data>.W,(xxx).W		(See BFSET table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFSET.L #<data>.W,(xxx).L		(See BFSET table below)
	{12,	0,	12,0,0,0,	14,0,1,0},	// BFINS.L #<data>.W,Dn
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFINS.L #<data>.W,(An)		(See BFINS table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFINS.L #<data>.W,(d16,An)		(See BFINS table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFINS.L #<data>.W,(d8,An,Xn)		(See BFINS table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFINS.L #<data>.W,(xxx).W		(See BFINS table below)
	{0,	0,	 0,0,0,0,	 0,0,0,0},	// BFINS.L #<data>.W,(xxx).L		(See BFINS table below)
	{},	// MMUOP030.L (An),#<data>.W
	{},	// MMUOP030.L (d16,An),#<data>.W
	{},	// MMUOP030.L (d8,An,Xn),#<data>.W
	{},	// MMUOP030.L (xxx).W,#<data>.W
	{},	// MMUOP030.L (xxx).L,#<data>.W
	{},	// FPP.L #<data>.W,Dn
	{},	// FPP.L #<data>.W,An
	{},	// FPP.L #<data>.W,(An)
	{},	// FPP.L #<data>.W,(An)+
	{},	// FPP.L #<data>.W,-(An)
	{},	// FPP.L #<data>.W,(d16,An)
	{},	// FPP.L #<data>.W,(d8,An,Xn)
	{},	// FPP.L #<data>.W,(xxx).W
	{},	// FPP.L #<data>.W,(xxx).L
	{},	// FPP.L #<data>.W,(d16,PC)
	{},	// FPP.L #<data>.W,(d8,PC,Xn)
	{},	// FPP.L #<data>.W,#<data>.L
	{},	// FScc.L #<data>.W,Dn
	{},	// FDBcc.L #<data>.W,Dn
	{},	// FScc.L #<data>.W,(An)
	{},	// FScc.L #<data>.W,(An)+
	{},	// FScc.L #<data>.W,-(An)
	{},	// FScc.L #<data>.W,(d16,An)
	{},	// FScc.L #<data>.W,(d8,An,Xn)
	{},	// FScc.L #<data>.W,(xxx).W
	{},	// FScc.L #<data>.W,(xxx).L
	{},	// FTRAPcc.L #<data>.W
	{},	// FTRAPcc.L #<data>.L
	{},	// FTRAPcc.L 
	{},	// FBccQ.L #<data>,#<data>.W
	{},	// FBccQ.L #<data>,#<data>.L
	{},	// FSAVE.L (An)
	{},	// FSAVE.L -(An)
	{},	// FSAVE.L (d16,An)
	{},	// FSAVE.L (d8,An,Xn)
	{},	// FSAVE.L (xxx).W
	{},	// FSAVE.L (xxx).L
	{},	// FRESTORE.L (An)
	{},	// FRESTORE.L (An)+
	{},	// FRESTORE.L (d16,An)
	{},	// FRESTORE.L (d8,An,Xn)
	{},	// FRESTORE.L (xxx).W
	{},	// FRESTORE.L (xxx).L
	{},	// FRESTORE.L (d16,PC)
	{},	// FRESTORE.L (d8,PC,Xn)
	{},	// CINVLQ.L #<data>,An
	{},	// CINVPQ.L #<data>,An
	{},	// CINVAQ.L #<data>
	{},	// CINVAQ.L #<data>
	{},	// CINVAQ.L #<data>
	{},	// CINVAQ.L #<data>
	{},	// CINVAQ.L #<data>
	{},	// CINVAQ.L #<data>
	{},	// CINVAQ.L #<data>
	{},	// CINVAQ.L #<data>
	{},	// CPUSHLQ.L #<data>,An
	{},	// CPUSHPQ.L #<data>,An
	{},	// CPUSHAQ.L #<data>
	{},	// CPUSHAQ.L #<data>
	{},	// CPUSHAQ.L #<data>
	{},	// CPUSHAQ.L #<data>
	{},	// CPUSHAQ.L #<data>
	{},	// CPUSHAQ.L #<data>
	{},	// CPUSHAQ.L #<data>
	{},	// CPUSHAQ.L #<data>
	{},	// PFLUSHN.L (An)
	{},	// PFLUSH.L (An)
	{},	// PFLUSHAN.L (An)
	{},	// PFLUSHA.L (An)
	{},	// PTESTR.L (An)
	{},	// PTESTW.L (An)
	{},	// PLPAR.L (An)
	{},	// PLPAW.L (An)
	{},	// MOVE16.L (An)+,(xxx).L
	{},	// MOVE16.L (xxx).L,(An)+
	{},	// MOVE16.L (An),(xxx).L
	{},	// MOVE16.L (xxx).L,(An)
	{},	// MOVE16.L (An)+,(An)+
	{},	// LPSTOP.L #<data>.W
	{0,	0,	 6,0,0,0,	 8,0,1,0},	// NBCD.B Dn
	{},	// NBCD.B (An)
	{},	// NBCD.B (An)+
	{},	// NBCD.B -(An)
	{},	// NBCD.B (d16,An)
	{},	// NBCD.B (d8,An,Xn)
	{},	// NBCD.B (xxx).W
	{},	// NBCD.B (xxx).L
	{0,	0,	 4,0,0,0,	 6,0,1,0},	// SBCD.B Dn,Dn
	{2,	1,	19,2,0,1,	22,2,1,1},	// SBCD.B -(An),-(An)
	{0,	0,	 4,0,0,0,	 6,0,1,0},	// ABCD.B Dn,Dn
	{2,	1,	19,2,0,1,	22,2,1,1}	// ABCD.B -(An),-(An)
};


/** 
  Cycles table for CHK2.BW instruction. 
  First column is for no exception case, 2nd column is for the exception taken case
  */
struct table_falcon_cycles_t table_falcon_cycles_CHK2_BW [] = {
	{3,	1,	25,2,0,0,	30,2,2,0}, {3,	1,	57,3,0,4,	68,3,4,4},	// CHK2.BW #<data>.W,(An)
	{4,	0,	26,2,0,0,	31,2,2,0}, {4,	0,	58,3,0,4,	69,3,4,4},	// CHK2.BW #<data>.W,(d16,An)
	{8,	2,	30,2,0,0,	36,2,3,0}, {8,	2,	62,3,0,4,	74,3,5,4},	// CHK2.BW #<data>.W,(d8,An,Xn)
	{6,	2,	28,2,0,0,	32,2,2,0}, {6,	2,	60,3,0,4,	70,3,4,4},	// CHK2.BW #<data>.W,(xxx).W
	{5,	0,	28,2,0,0,	35,2,3,0}, {5,	0,	60,3,0,4,	73,3,5,4},	// CHK2.BW #<data>.W,(xxx).L
	{4,	0,	26,2,0,0,	31,2,2,0}, {4,	0,	58,3,0,4,	69,3,4,4},	// CHK2.BW #<data>.W,(d16,PC)
	{8,	2,	30,2,0,0,	36,2,3,0}, {8,	2,	62,3,0,4,	74,3,5,4}	// CHK2.BW #<data>.W,(d8,PC,Xn)
};

/** 
  Cycles table for CHK2.L instruction. 
  First column is for no exception case, 2nd column is for the exception taken case
  */
struct table_falcon_cycles_t table_falcon_cycles_CHK2_L [] = {
	{3,	0,	34,2,0,0,	39,2,2,0}, {3,	0,	86,3,0,4,	97,3,4,4},	// CHK2.L #<data>.W,(An)
	{6,	0,	36,2,0,0,	44,2,3,0}, {6,	0,	88,3,0,4,	102,3,5,4},	// CHK2.L #<data>.W,(d16,An)
	{10,	2,	40,2,0,0,	46,2,3,0}, {10,	2,	92,3,0,4,	104,3,5,4},	// CHK2.L #<data>.W,(d8,An,Xn)
	{8,	2,	38,2,0,0,	44,2,3,0}, {8,	2,	90,3,0,4,	102,3,5,4},	// CHK2.L #<data>.W,(xxx).W
	{7,	0,	38,2,0,0,	45,2,3,0}, {7,	0,	90,3,0,4,	103,3,5,4},	// CHK2.L #<data>.W,(xxx).L
	{6,	0,	36,2,0,0,	44,2,3,0}, {6,	0,	88,3,0,4,	102,3,5,4},	// CHK2.L #<data>.W,(d16,PC)
	{10,	2,	40,2,0,0,	46,2,3,0}, {10,	2,	92,3,0,4,	104,3,5,4}	// CHK2.L #<data>.W,(d8,PC,Xn)
};

/** 
  Cycles table for CHK.L instruction. 
  First column is for no exception case, 2nd column is for the exception taken case
  */
struct table_falcon_cycles_t table_falcon_cycles_CHK_L [] = {
	{8,	0,	 8,0,0,0,	10,0,1,0},	{4,	0,	58,1,0,4,	66,1,3,4},// CHK.L Dn,Dn
	{1,	1,	17,1,0,0,	19,1,1,0},	{1,	1,	67,2,0,4,	75,2,3,4},// CHK.L (An),Dn
	{0,	1,	17,1,0,0,	19,1,1,0},	{0,	1,	67,2,0,4,	75,2,3,4},// CHK.L (An)+,Dn
	{2,	2,	18,1,0,0,	20,1,1,0},	{2,	2,	68,2,0,4,	76,2,3,4},// CHK.L -(An),Dn
	{2,	2,	18,1,0,0,	22,1,2,0},	{2,	2,	68,2,0,4,	78,2,4,4},// CHK.L (d16,An),Dn
	{4,	2,	20,1,0,0,	24,1,2,0},	{4,	2,	70,2,0,4,	80,2,4,4},// CHK.L (d8,An,Xn),Dn
	{2,	2,	18,1,0,0,	22,1,2,0},	{2,	2,	68,2,0,4,	78,2,4,4},// CHK.L (xxx).W,Dn
	{1,	0,	18,1,0,0,	23,1,2,0},	{1,	0,	68,2,0,4,	79,2,4,4},// CHK.L (xxx).L,Dn
	{2,	2,	18,1,0,0,	22,1,2,0},	{2,	2,	68,2,0,4,	78,2,4,4},// CHK.L (d16,PC),Dn
	{4,	2,	20,1,0,0,	24,1,2,0},	{4,	2,	70,2,0,4,	80,2,4,4},// CHK.L (d8,PC,Xn),Dn
	{4,	0,	12,0,0,0,	16,0,2,0},	{4,	0,	62,1,0,4,	72,1,4,4} // CHK.L #<data>.L,Dn
};

/** 
  Cycles table for CHK.W  instruction. 
  First column is for no exception case, 2nd column is for the exception taken case
  */
struct table_falcon_cycles_t table_falcon_cycles_CHK_W [] = {
	{8,	0,	 8,0,0,0,	10,0,1,0},	{4,	0,	38,1,0,4,	46,1,3,4},// CHK.W Dn,Dn
	{1,	1,	13,1,0,0,	15,1,1,0},	{1,	1,	43,2,0,4,	51,2,3,4},// CHK.W (An),Dn
	{0,	1,	13,1,0,0,	15,1,1,0},	{0,	1,	43,2,0,4,	51,2,3,4},// CHK.W (An)+,Dn
	{2,	2,	14,1,0,0,	16,1,1,0},	{2,	2,	44,2,0,4,	52,2,3,4},// CHK.W -(An),Dn
	{2,	2,	14,1,0,0,	18,1,2,0},	{2,	2,	44,2,0,4,	54,2,4,4},// CHK.W (d16,An),Dn
	{4,	2,	16,1,0,0,	20,1,2,0},	{4,	2,	46,2,0,4,	56,2,4,4},// CHK.W (d8,An,Xn),Dn
	{2,	2,	14,1,0,0,	18,1,2,0},	{2,	2,	44,2,0,4,	54,2,4,4},// CHK.W (xxx).W,Dn
	{1,	0,	14,1,0,0,	19,1,2,0},	{1,	0,	44,2,0,4,	55,2,4,4},// CHK.W (xxx).L,Dn
	{2,	2,	14,1,0,0,	18,1,2,0},	{2,	2,	44,2,0,4,	54,2,4,4},// CHK.W (d16,PC),Dn
	{4,	2,	16,1,0,0,	20,1,2,0},	{4,	2,	46,2,0,4,	56,2,4,4},// CHK.W (d8,PC,Xn),Dn
	{2,	0,	10,0,0,0,	14,0,2,0},	{2,	0,	40,1,0,4,	50,1,4,4} // CHK.W #<data>.W,Dn
};

/** 
  Cycles table for CAS.BW  instruction. 
  First column is for succesful compare case, 2nd column is for unsuccesful compare case
  */
struct table_falcon_cycles_t table_falcon_cycles_CAS_BW [] = {
	{4,	0,	19,1,0,1,	23,1,2,1}, {4,	0,	15,1,0,0,	19,1,2,0},	// CAS.BW #<data>.W,(An)
	{3,	0,	21,1,0,1,	25,1,2,1}, {3,	0,	17,1,0,0,	21,1,2,0},	// CAS.BW #<data>.W,(An)+
	{4,	0,	19,1,0,1,	23,1,2,1}, {4,	0,	15,1,0,0,	19,1,2,0},	// CAS.BW #<data>.W,-(An)
	{6,	0,	21,1,0,1,	25,1,2,1}, {6,	0,	17,1,0,0,	21,1,2,0},	// CAS.BW #<data>.W,(d16,An)
	{8,	0,	23,1,0,1,	29,1,3,1}, {8,	0,	19,1,0,0,	25,1,3,0},	// CAS.BW #<data>.W,(d8,An,Xn)
	{6,	0,	21,1,0,1,	25,1,2,1}, {6,	0,	17,1,0,0,	21,1,2,0},	// CAS.BW #<data>.W,(xxx).W
	{8,	0,	23,1,0,1,	29,1,3,1}, {8,	0,	19,1,0,0,	25,1,3,0}	// CAS.BW #<data>.W,(xxx).L
};

/** 
  Cycles table for CAS.L  instruction. 
  First column is for succesful compare case, 2nd column is for unsuccesful compare case
  */
struct table_falcon_cycles_t table_falcon_cycles_CAS_L [] = {
	{6,	0,	29,1,0,1,	33,1,2,1}, {6,	0,	21,1,0,0,	25,1,2,0},	// CAS.L #<data>.W,(An)
	{5,	0,	31,1,0,1,	35,1,2,1}, {5,	0,	23,1,0,0,	27,1,2,0},	// CAS.L #<data>.W,(An)+
	{6,	0,	29,1,0,1,	33,1,2,1}, {6,	0,	21,1,0,0,	25,1,2,0},	// CAS.L #<data>.W,-(An)
	{8,	0,	31,1,0,1,	38,1,3,1}, {8,	0,	23,1,0,0,	30,1,3,0},	// CAS.L #<data>.W,(d16,An)
	{10,	0,	33,1,0,1,	39,1,3,1}, {10,	0,	25,1,0,0,	31,1,3,0},	// CAS.L #<data>.W,(d8,An,Xn)
	{8,	0,	31,1,0,1,	37,1,3,1}, {8,	0,	23,1,0,0,	29,1,3,0},	// CAS.L #<data>.W,(xxx).W
	{10,	0,	33,1,0,1,	39,1,3,1}, {10,	0,	25,1,0,0,	31,1,3,0}	// CAS.L #<data>.W,(xxx).L
};

/** 
  Cycles table for CAS2.W  instruction. 
  The table indicates Maximum time.
  */
struct table_falcon_cycles_t table_falcon_cycles_CAS2_W [] = {
	{2,	0,	32,2,0,2,	38,2,2,2},	// CAS2.W #<data>.L (succesful compare) 
	{2,	0,	28,2,0,0,	32,2,2,0}	// CAS2.W #<data>.L (unsuccesful compare)
};

/** 
  Cycles table for CAS2.L  instruction. 
  The table indicates Maximum time.
  */
struct table_falcon_cycles_t table_falcon_cycles_CAS2_L [] = {
	{2,	0,	48,2,0,2,	54,2,2,2},	// CAS2.L #<data>.L (succesful compare) 
	{2,	0,	36,2,0,0,	40,2,2,0}	// CAS2.L #<data>.L (unsuccesful compare) 
};

/** 
  Cycles table for RTE  instruction. 
  */
struct table_falcon_cycles_t table_falcon_cycles_RTE [] = {
	{1,	0,	26,4,0,0,	32,4,2,0},	// RTE.L (Normal four Word)
	{1,	0,	26,4,0,0,	32,4,2,0},	// RTE.L (six Word)
	{1,	0,	20,4,0,0,	20,4,0,0},	// RTE.L (throwaway)
	{1,	0,	40,7,0,0,	44,7,2,0},	// RTE.L (coprocessor)
	{1,	0,	56,10,0,0,	60,10,2,0},	// RTE.L (short fault)
	{1,	0,	126,25,0,0,	120,25,2,0}	// RTE.L (long fault)
};

/** 
  Cycles table for Bcc  instruction. 
  */
struct table_falcon_cycles_t table_falcon_cycles_Bcc [] = {
	{6,	0,	 6,0,0,0,	12,0,2,0},	// Bcc (taken)
	{4,	0,	 4,0,0,0,	 6,0,1,0},	// Bcc.B (not taken)
	{6,	0,	 6,0,0,0,	 8,0,1,0},	// Bcc.W (not taken)
	{6,	0,	 6,0,0,0,	12,0,2,0}	// Bcc.L (not taken)
};

/** 
  Cycles table for DBcc  instruction. 
  */
struct table_falcon_cycles_t table_falcon_cycles_DBcc [] = {
	{6,	0,	 6,0,0,0,	12,0,2,0},	// DBcc (cc = false, count not expired)
	{10,	0,	10,0,0,0,	19,0,3,0},	// DBcc (cc = false, count expired)
	{6,	0,	 6,0,0,0,	10,0,1,0}	// DBcc (cc = true)
};

/** 
  Cycles table for TRAPcc  instruction. 
  */
struct table_falcon_cycles_t table_falcon_cycles_TRAPcc [] = {
	{2,	0,	34,1,0,5,	40,1,2,5},	// TRAPcc (trap)
	{4,	0,	 4,0,0,0,	 6,0,1,0}	// TRAPcc (no trap)
};

/** 
  Cycles table for TRAPcc.W  instruction. 
  */
struct table_falcon_cycles_t table_falcon_cycles_TRAPcc_W [] = {
	{5,	0,	36,1,0,5,	44,1,3,5},	// TRAPcc.W (trap)
	{6,	0,	 6,0,0,0,	 8,0,1,0}	// TRAPcc.W (no trap)
};

/** 
  Cycles table for TRAPcc.L  instruction. 
  */
struct table_falcon_cycles_t table_falcon_cycles_TRAPcc_L [] = {
	{6,	0,	62,1,0,5,	70,1,3,5},	// TRAPcc.L (trap)
	{8,	0,	 8,0,0,0,	12,0,2,0}	// TRAPcc.L (no trap)
};

/** 
  Cycles table for TRAPV  instruction. 
  */
struct table_falcon_cycles_t table_falcon_cycles_TRAPV [] = {
	{2,	0,	34,1,0,5,	40,1,2,5},	// TRAPV (trap)
	{4,	0,	 4,0,0,0,	 6,0,1,0}	// TRAPV (no trap)
};

/** 
  Cycles table for DIVU.L instruction. 
  The table indicates Maximum time.
  */
struct table_falcon_cycles_t table_falcon_cycles_DIVU_L [] = {
	{14,	0,	82,0,0,0,	86,0,2,0},	// DIVU.L #<data>.W,Dn
	{1,	0,	88,1,0,0,	93,1,2,0},	// DIVU.L #<data>.W,(An)
	{4,	1,	91,1,0,0,	95,1,2,0},	// DIVU.L #<data>.W,(An)+
	{2,	0,	88,1,0,0,	93,1,2,0},	// DIVU.L #<data>.W,-(An)
	{4,	0,	90,1,0,0,	98,1,3,0},	// DIVU.L #<data>.W,(d16,An)
	{8,	2,	94,1,0,0,	100,1,3,0},	// DIVU.L #<data>.W,(d8,An,Xn)
	{6,	2,	92,1,0,0,	99,1,3,0},	// DIVU.L #<data>.W,(xxx).W
	{5,	0,	92,1,0,0,	98,1,3,0},	// DIVU.L #<data>.W,(xxx).L
	{4,	0,	90,1,0,0,	98,1,3,0},	// DIVU.L #<data>.W,(d16,PC)
	{8,	2,	94,1,0,0,	100,1,3,0},	// DIVU.L #<data>.W,(d8,PC,Xn)
	{6,	0,	84,0,0,0,	90,0,3,0}	// DIVU.L #<data>.W,#<data>.L
};

/** 
  Cycles table for DIVS.L instruction. 
  The table indicates Maximum time.
  */
struct table_falcon_cycles_t table_falcon_cycles_DIVS_L [] = {
	{16,	0,	94,0,0,0,	98,0,2,0},	// DIVS.L #<data>.W,Dn
	{1,	0,	100,1,0,0,	105,1,2,0},	// DIVS.L #<data>.W,(An)
	{4,	1,	103,1,0,0,	107,1,2,0},	// DIVS.L #<data>.W,(An)+
	{2,	0,	100,1,0,0,	105,1,2,0},	// DIVS.L #<data>.W,-(An)
	{4,	0,	102,1,0,0,	110,1,3,0},	// DIVS.L #<data>.W,(d16,An)
	{8,	2,	106,1,0,0,	112,1,3,0},	// DIVS.L #<data>.W,(d8,An,Xn)
	{6,	2,	104,1,0,0,	110,1,3,0},	// DIVS.L #<data>.W,(xxx).W
	{5,	0,	104,1,0,0,	111,1,3,0},	// DIVS.L #<data>.W,(xxx).L
	{4,	0,	102,1,0,0,	110,1,3,0},	// DIVS.L #<data>.W,(d16,PC)
	{8,	2,	106,1,0,0,	112,1,3,0},	// DIVS.L #<data>.W,(d8,PC,Xn)
	{6,	0,	96,0,0,0,	102,0,3,0}	// DIVS.L #<data>.W,#<data>.L
};

/** 
  Cycles table for BFTST Mem instruction. 
  First column is for Mem < 5bits case, 2nd column is for Mem = 5bits case
  */
struct table_falcon_cycles_t table_falcon_cycles_BFTST_Mem [] = {
	{14,	0,	14,1,0,0,	18,1,2,0},	{14,	0,	20,2,0,0,	24,2,2,0},	// BFTST.L #<data>.W,(An)
	{16,	0,	16,1,0,0,	20,1,2,0},	{16,	0,	22,2,0,0,	26,2,2,0},	// BFTST.L #<data>.W,(d16,An)
	{18,	0,	18,1,0,0,	24,1,3,0},	{18,	0,	24,2,0,0,	30,2,3,0},	// BFTST.L #<data>.W,(d8,An,Xn)
	{16,	0,	16,1,0,0,	20,1,2,0},	{16,	0,	22,2,0,0,	26,2,2,0},	// BFTST.L #<data>.W,(xxx).W
	{18,	0,	18,1,0,0,	24,1,3,0},	{18,	0,	24,2,0,0,	30,2,3,0},	// BFTST.L #<data>.W,(xxx).L
	{16,	0,	16,1,0,0,	20,1,2,0},	{16,	0,	22,2,0,0,	26,2,2,0},	// BFTST.L #<data>.W,(d16,PC)
	{18,	0,	18,1,0,0,	24,1,3,0},	{18,	0,	24,2,0,0,	30,2,3,0}	// BFTST.L #<data>.W,(d8,PC,Xn)
};

/** 
  Cycles table for BFEXTU Mem instruction. 
  First column is for Mem < 5bits case, 2nd column is for Mem = 5bits case
  */
struct table_falcon_cycles_t table_falcon_cycles_BFEXTU_Mem [] = {
	{14,	0,	16,1,0,0,	20,1,2,0},	{14,	0,	24,2,0,0,	28,2,2,0},	// BFEXTU.L #<data>.W,(An)	
	{16,	0,	18,1,0,0,	22,1,2,0},	{16,	0,	26,2,0,0,	30,2,2,0},	// BFEXTU.L #<data>.W,(d16,An)
	{18,	0,	20,1,0,0,	26,1,3,0},	{18,	0,	28,2,0,0,	34,2,3,0},	// BFEXTU.L #<data>.W,(d8,An,Xn)
	{16,	0,	18,1,0,0,	22,1,2,0},	{16,	0,	26,2,0,0,	30,2,2,0},	// BFEXTU.L #<data>.W,(xxx).W	
	{18,	0,	20,1,0,0,	26,1,3,0},	{18,	0,	28,2,0,0,	34,2,3,0},	// BFEXTU.L #<data>.W,(xxx).L	
	{16,	0,	18,1,0,0,	22,1,2,0},	{16,	0,	26,2,0,0,	30,2,2,0},	// BFEXTU.L #<data>.W,(d16,PC)
	{18,	0,	20,1,0,0,	26,1,3,0},	{18,	0,	28,2,0,0,	34,2,3,0}	// BFEXTU.L #<data>.W,(d8,PC,Xn)
};
	
/** 
  Cycles table for BFCHG Mem instruction. 
  First column is for Mem < 5bits case, 2nd column is for Mem = 5bits case
  */
struct table_falcon_cycles_t table_falcon_cycles_BFCHG_Mem [] = {
	{14,	0,	20,1,0,1,	24,1,2,1},	{14,	0,	32,2,0,2,	36,2,2,2},	// BFCHG.L #<data>.W,(An)	
	{16,	0,	22,1,0,1,	26,1,2,1},	{16,	0,	34,2,0,2,	38,2,2,2},	// BFCHG.L #<data>.W,(d16,An)	
	{18,	0,	24,1,0,1,	30,1,3,1},	{18,	0,	36,2,0,2,	42,2,3,2},	// BFCHG.L #<data>.W,(d8,An,Xn)
	{16,	0,	22,1,0,1,	26,1,2,1},	{16,	0,	34,2,0,2,	38,2,2,2},	// BFCHG.L #<data>.W,(xxx).W	
	{18,	0,	24,1,0,1,	30,1,3,1},	{18,	0,	36,2,0,2,	42,2,3,2}	// BFCHG.L #<data>.W,(xxx).L	
};
	
/** 
  Cycles table for BFEXTS Mem instruction. 
  First column is for Mem < 5bits case, 2nd column is for Mem = 5bits case
  */
struct table_falcon_cycles_t table_falcon_cycles_BFEXTS_Mem [] = {
	{14,	0,	16,1,0,0,	20,1,2,0},	{14,	0,	24,2,0,0,	28,2,2,0},	// BFEXTS.L #<data>.W,(An)	
	{16,	0,	18,1,0,0,	22,1,2,0},	{16,	0,	26,2,0,0,	30,2,2,0},	// BFEXTS.L #<data>.W,(d16,An)
	{18,	0,	20,1,0,0,	26,1,3,0},	{18,	0,	28,2,0,0,	34,2,3,0},	// BFEXTS.L #<data>.W,(d8,An,Xn)
	{16,	0,	18,1,0,0,	22,1,2,0},	{16,	0,	26,2,0,0,	30,2,2,0},	// BFEXTS.L #<data>.W,(xxx).W	
	{18,	0,	20,1,0,0,	26,1,3,0},	{18,	0,	28,2,0,0,	34,2,3,0},	// BFEXTS.L #<data>.W,(xxx).L	
	{16,	0,	18,1,0,0,	22,1,2,0},	{16,	0,	26,2,0,0,	30,2,2,0},	// BFEXTS.L #<data>.W,(d16,PC)
	{18,	0,	20,1,0,0,	26,1,3,0},	{18,	0,	28,2,0,0,	34,2,3,0}	// BFEXTS.L #<data>.W,(d8,PC,Xn)
};

/** 
  Cycles table for BFCLR Mem instruction. 
  First column is for Mem < 5bits case, 2nd column is for Mem = 5bits case
  */
struct table_falcon_cycles_t table_falcon_cycles_BFCLR_Mem [] = {
	{14,	0,	20,1,0,1,	24,1,2,1},	{14,	0,	32,2,0,2,	36,2,2,2},	// BFCLR.L #<data>.W,(An)	
	{16,	0,	22,1,0,1,	26,1,2,1},	{16,	0,	34,2,0,2,	38,2,2,2},	// BFCLR.L #<data>.W,(d16,An)	
	{18,	0,	24,1,0,1,	30,1,3,1},	{18,	0,	36,2,0,2,	42,2,3,2},	// BFCLR.L #<data>.W,(d8,An,Xn)
	{16,	0,	22,1,0,1,	26,1,2,1},	{16,	0,	34,2,0,2,	38,2,2,2},	// BFCLR.L #<data>.W,(xxx).W	
	{18,	0,	24,1,0,1,	30,1,3,1},	{18,	0,	36,2,0,2,	42,2,3,2}	// BFCLR.L #<data>.W,(xxx).L	
};

/** 
  Cycles table for BFFFO Mem instruction. 
  First column is for Mem < 5bits case, 2nd column is for Mem = 5bits case
  */
struct table_falcon_cycles_t table_falcon_cycles_BFFFO_Mem [] = {
	{14,	0,	26,1,0,0,	30,1,2,0},	{14,	0,	34,2,0,0,	38,2,2,0},	// BFFFO.L #<data>.W,(An)		(See BFFFO table below)
	{16,	0,	28,1,0,0,	32,1,2,0},	{16,	0,	36,2,0,0,	40,2,2,0},	// BFFFO.L #<data>.W,(d16,An)		(See BFFFO table below)
	{18,	0,	30,1,0,0,	36,1,3,0},	{18,	0,	38,2,0,0,	44,2,3,0},	// BFFFO.L #<data>.W,(d8,An,Xn)		(See BFFFO table below)
	{16,	0,	28,1,0,0,	32,1,2,0},	{16,	0,	36,2,0,0,	40,2,2,0},	// BFFFO.L #<data>.W,(xxx).W		(See BFFFO table below)
	{18,	0,	30,1,0,0,	36,1,3,0},	{18,	0,	38,2,0,0,	44,2,3,0},	// BFFFO.L #<data>.W,(xxx).L		(See BFFFO table below)
	{16,	0,	28,1,0,0,	32,1,2,0},	{16,	0,	36,2,0,0,	40,2,2,0},	// BFFFO.L #<data>.W,(d16,PC)		(See BFFFO table below)
	{18,	0,	30,1,0,0,	36,1,3,0},	{18,	0,	38,2,0,0,	44,2,3,0}	// BFFFO.L #<data>.W,(d8,PC,Xn)		(See BFFFO table below)
};

/** 
  Cycles table for BFSET Mem instruction. 
  First column is for Mem < 5bits case, 2nd column is for Mem = 5bits case
  */
struct table_falcon_cycles_t table_falcon_cycles_BFSET_Mem [] = {
	{14,	0,	20,1,0,1,	24,1,2,1},	{14,	0,	32,2,0,2,	36,2,2,2},	// BFSET.L #<data>.W,(An)	
	{16,	0,	22,1,0,1,	26,1,2,1},	{16,	0,	34,2,0,2,	38,2,2,2},	// BFSET.L #<data>.W,(d16,An)	
	{18,	0,	24,1,0,1,	30,1,3,1},	{18,	0,	36,2,0,2,	42,2,3,2},	// BFSET.L #<data>.W,(d8,An,Xn)
	{16,	0,	22,1,0,1,	26,1,2,1},	{16,	0,	34,2,0,2,	38,2,2,2},	// BFSET.L #<data>.W,(xxx).W	
	{18,	0,	24,1,0,1,	30,1,3,1},	{18,	0,	36,2,0,2,	42,2,3,2}	// BFSET.L #<data>.W,(xxx).L	
};

/** 
  Cycles table for BFINS Mem instruction. 
  First column is for Mem < 5bits case, 2nd column is for Mem = 5bits case
  */
struct table_falcon_cycles_t table_falcon_cycles_BFINS_Mem [] = {
	{14,	0,	18,1,0,1,	22,1,2,1},	{14,	0,	28,2,0,2,	32,2,2,2},	// BFINS.L #<data>.W,(An)		(See BFINS table below)
	{16,	0,	20,1,0,1,	24,1,2,1},	{16,	0,	30,2,0,2,	34,2,2,2},	// BFINS.L #<data>.W,(d16,An)		(See BFINS table below)
	{18,	0,	22,1,0,1,	28,1,3,1},	{18,	0,	32,2,0,2,	38,2,3,2},	// BFINS.L #<data>.W,(d8,An,Xn)		(See BFINS table below)
	{16,	0,	20,1,0,1,	24,1,2,1},	{16,	0,	30,2,0,2,	34,2,2,2},	// BFINS.L #<data>.W,(xxx).W		(See BFINS table below)
	{18,	0,	22,1,0,1,	28,1,3,1},	{18,	0,	32,2,0,2,	38,2,3,2}	// BFINS.L #<data>.W,(xxx).L		(See BFINS table below)
};

/** 
  Cycles table for LSD Dx,Dy instruction. 
  LSD can be LSR or LSL. 
  */
struct table_falcon_cycles_t table_falcon_cycles_LSD [] = {
	{6,	0,	 6,0,0,0,	 8,0,1,0},	// LSD.[B/W/L] Dn,Dn	(shift count is less than or equal to the size of data)
	{8,	0,	 8,0,0,0,	10,0,1,0}	// LSD.[B/W/L] Dn,Dn	(shift count is greater than size of data)
};

/** 
  Cycles table for ASR Dx,Dy instruction. 
  */
struct table_falcon_cycles_t table_falcon_cycles_ASR [] = {
	{6,	0,	 6,0,0,0,	 8,0,1,0},	// ASR.[B/W/L] Dn,Dn	(shift count is less than or equal to the size of data)
	{10,	0,	10,0,0,0,	12,0,1,0}	// ASR.[B/W/L] Dn,Dn	(shift count is greater than size of data)
};

/** 
  Cycles table for MOVEC Rn,Cr-[A/B] instruction. 
  */
struct table_falcon_cycles_t table_falcon_cycles_MOVEC [] = {
	{6,	0,	 6,0,0,0,	 8,0,1,0},	// MOVEC.L Rn,CR-A	(Control Registers USP,VBR, CAAR,MSP, and ISP)
	{4,	0,	12,0,0,0,	14,0,1,0}	// MOVEC.L Rn,CR-B	(Control Registers SFC, DFC,and CACR)
};

/** 
  Cycles table for 68030 internal timings. 
  */
struct table_falcon_cycles_t table_falcon_cycles_68030_internal [] = {
	{1,	0,	11,1,0,0,	11,1,0,0},	// BKPT
	{0,	0,	35,2,0,4,	40,2,2,4},	// Interrupt (I-Stack)
	{0,	0,	53,2,0,8,	48,2,2,8},	// Interrupt (M-Stack)
	{0,	0,	518,0,0,0,	520,0,1,0},	// RESET Instruction
	{0,	0,	 8,0,0,0,	12,0,2,0},	// STOP
	{0,	0,	34,1,0,5,	40,1,2,5},	// TRACE
	{0,	0,	28,1,0,4,	34,1,2,4},	// Illegal Instruction
	{0,	0,	28,1,0,4,	34,1,2,4},	// A-Line Trap
	{0,	0,	28,1,0,4,	34,1,2,4},	// F-Line Trap
	{0,	0,	28,1,0,4,	34,1,2,4},	// Privilege Violation	
	{0,	0,	58,1,0,10,	64,1,2,10},	// Bus Cycle Fault (Short)
	{0,	0,	102,1,0,24,	168,1,2,24}	// Bus Cycle Fault (Long)
};
